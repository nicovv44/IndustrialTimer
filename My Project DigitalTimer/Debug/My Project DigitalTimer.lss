
My Project DigitalTimer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000150b  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000134  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  0000150b  2**0
                  ALLOC
  3 .comment      0000005b  00000000  00000000  0000150b  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000248  00000000  00000000  00001568  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004921  00000000  00000000  000017b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000012ab  00000000  00000000  000060d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001474  00000000  00000000  0000737c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000580  00000000  00000000  000087f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004e1  00000000  00000000  00008d70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001485  00000000  00000000  00009251  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000180  00000000  00000000  0000a6d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  0000142e  0000142e  00001502  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000a858  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.atmel_start_init 00000006  00001422  00001422  000014f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .progmemx.data 0000003c  00000134  00000134  00000208  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 16 .text.displayOperationValue 00000088  00000cfa  00000cfa  00000dce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.displaySetValue 00000088  00000d82  00000d82  00000e56  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.displaySetValModeHome 0000004c  000010f0  000010f0  000011c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.displayProgModeHome 00000056  00000f5a  00000f5a  0000102e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.ModifSetValue 0000009a  00000c60  00000c60  00000d34  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.increaseSetValueDigit 0000016e  000005cc  000005cc  000006a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.EEPROM_wait_write_completion 00000006  00001428  00001428  000014fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.EEPROM_write 00000028  000012c4  000012c4  00001398  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.EEPROM_read 0000001c  00001392  00001392  00001466  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.EEPROM_write_setValue 00000060  00000efa  00000efa  00000fce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.EEPROM_read_setValue 00000078  00000e0a  00000e0a  00000ede  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .bss.cursor_y 00000001  0080010e  0080010e  0000150b  2**0
                  ALLOC
 28 .bss.cursor_x 00000001  0080010f  0080010f  0000150b  2**0
                  ALLOC
 29 .bss.SetValMode 00000001  00800110  00800110  0000150b  2**0
                  ALLOC
 30 .bss.ProgMode 00000001  00800111  00800111  0000150b  2**0
                  ALLOC
 31 .bss.SetValue 00000004  00800106  00800106  0000150b  2**0
                  ALLOC
 32 .bss.OperationValue 00000004  0080010a  0080010a  0000150b  2**0
                  ALLOC
 33 .text.lcd_nibble 00000056  00000fb0  00000fb0  00001084  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.lcd_byte 00000022  00001310  00001310  000013e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.lcd_command 00000030  0000126a  0000126a  0000133e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.lcd_putchar 0000002a  0000129a  0000129a  0000136e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.lcd_puts 0000001a  000013ae  000013ae  00001482  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.lcd_clear 00000008  00001412  00001412  000014e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.lcd_init 000000a4  00000bbc  00000bbc  00000c90  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.lcd_nocursor_noblink 00000008  0000141a  0000141a  000014ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.lcd_cursor_blink 00000024  000012ec  000012ec  000013c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .data.lcd_pos 00000001  00800112  00001432  00001506  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 43 .text.IntentionActionner 000000f6  0000086a  0000086a  0000093e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .progmemx.data 0000000b  00000170  00000170  00000244  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 45 .text.main    00000130  0000073a  0000073a  0000080e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .progmemx.data.Revision 00000009  0000017b  0000017b  0000024f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 47 .text.system_init 000000e0  00000960  00000960  00000a34  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.protected_write_io 0000000e  000013f8  000013f8  000014cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text.__vector_4 000000c0  00000a40  00000a40  00000b14  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .bss.SW_4_TO_PROCESS 00000001  00800113  00800113  0000150b  2**0
                  ALLOC
 51 .bss.SW_3_TO_PROCESS 00000001  00800114  00800114  0000150b  2**0
                  ALLOC
 52 .bss.SW_2_TO_PROCESS 00000001  00800115  00800115  0000150b  2**0
                  ALLOC
 53 .bss.SW_1_TO_PROCESS 00000001  00800116  00800116  0000150b  2**0
                  ALLOC
 54 .data.SW_4_STATE 00000001  00800117  00001433  00001507  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 55 .data.SW_3_STATE 00000001  00800118  00001434  00001508  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 56 .data.SW_2_STATE 00000001  00800119  00001435  00001509  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 57 .data.SW_1_STATE 00000001  0080011a  00001436  0000150a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 58 .text.__vector_14 0000004e  00001006  00001006  000010da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.__vector_11 0000004e  00001054  00001054  00001128  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.__vector_7 0000004e  000010a2  000010a2  00001176  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text.MyPow   00000022  00001332  00001332  00001406  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.libgcc.mul 00000020  00001354  00001354  00001428  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.libgcc.div 00000044  00001182  00001182  00001256  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.libgcc  0000000c  00001406  00001406  000014da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.libgcc.mul 00000016  000013e2  000013e2  000014b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.libgcc  0000001a  000013c8  000013c8  0000149c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.libgcc.mul 0000001e  00001374  00001374  00001448  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.avrlibc 00000046  0000113c  0000113c  00001210  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.avrlibc 00000448  00000184  00000184  00000258  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text.avrlibc 00000036  000011fe  000011fe  000012d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text.avrlibc 00000078  00000e82  00000e82  00000f56  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text.avrlibc 000000bc  00000b00  00000b00  00000bd4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .text.libgcc.prologue 00000038  000011c6  000011c6  0000129a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 74 .text.libgcc.prologue 00000036  00001234  00001234  00001308  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__ctors_end>
   4:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__bad_interrupt>
   8:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__bad_interrupt>
   c:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__bad_interrupt>
  10:	0c 94 20 05 	jmp	0xa40	; 0xa40 <__vector_4>
  14:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__bad_interrupt>
  18:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__bad_interrupt>
  1c:	0c 94 51 08 	jmp	0x10a2	; 0x10a2 <__vector_7>
  20:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__bad_interrupt>
  24:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__bad_interrupt>
  28:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__bad_interrupt>
  2c:	0c 94 2a 08 	jmp	0x1054	; 0x1054 <__vector_11>
  30:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__bad_interrupt>
  34:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__bad_interrupt>
  38:	0c 94 03 08 	jmp	0x1006	; 0x1006 <__vector_14>
  3c:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__bad_interrupt>
  40:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__bad_interrupt>
  44:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__bad_interrupt>
  48:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__bad_interrupt>
  4c:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__bad_interrupt>
  50:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__bad_interrupt>
  54:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__bad_interrupt>
  58:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__bad_interrupt>
  5c:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__bad_interrupt>
  60:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__bad_interrupt>
  64:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__bad_interrupt>
  68:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__bad_interrupt>
  6c:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__bad_interrupt>
  70:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__bad_interrupt>
  74:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__bad_interrupt>
  78:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__bad_interrupt>
  7c:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__bad_interrupt>
  80:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__bad_interrupt>
  84:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__bad_interrupt>
  88:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__bad_interrupt>
  8c:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__bad_interrupt>
  90:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__bad_interrupt>
  94:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__bad_interrupt>
  98:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__bad_interrupt>
  9c:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__bad_interrupt>
  a0:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__bad_interrupt>
  a4:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__bad_interrupt>
  a8:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__bad_interrupt>
  ac:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__bad_interrupt>
  b0:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__bad_interrupt>
  b4:	89 03       	fmulsu	r16, r17
  b6:	7e 03       	fmul	r23, r22
  b8:	73 03       	mulsu	r23, r19
  ba:	68 03       	fmul	r22, r16
  bc:	5d 03       	fmul	r21, r21
  be:	52 03       	mulsu	r21, r18
  c0:	47 03       	mulsu	r20, r23
  c2:	3c 03       	fmul	r19, r20
  c4:	31 03       	mulsu	r19, r17
  c6:	26 03       	mulsu	r18, r22

000000c8 <.dinit>:
  c8:	01 00       	.word	0x0001	; ????
  ca:	01 12       	cpse	r0, r17
  cc:	80 01       	movw	r16, r0
  ce:	12 01       	movw	r2, r4
  d0:	13 00       	.word	0x0013	; ????
  d2:	14 32       	cpi	r17, 0x24	; 36
  d4:	01 13       	cpse	r16, r17
  d6:	01 17       	cp	r16, r17
  d8:	80 01       	movw	r16, r0
  da:	17 01       	movw	r2, r14
  dc:	1b 00       	.word	0x001b	; ????
  de:	14 33       	cpi	r17, 0x34	; 52

000000e0 <__ctors_end>:
  e0:	11 24       	eor	r1, r1
  e2:	1f be       	out	0x3f, r1	; 63
  e4:	cf ef       	ldi	r28, 0xFF	; 255
  e6:	d8 e0       	ldi	r29, 0x08	; 8
  e8:	de bf       	out	0x3e, r29	; 62
  ea:	cd bf       	out	0x3d, r28	; 61

000000ec <__do_copy_data>:
  ec:	e8 ec       	ldi	r30, 0xC8	; 200
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	40 e0       	ldi	r20, 0x00	; 0
  f2:	17 c0       	rjmp	.+46     	; 0x122 <__do_clear_bss+0x8>
  f4:	b5 91       	lpm	r27, Z+
  f6:	a5 91       	lpm	r26, Z+
  f8:	35 91       	lpm	r19, Z+
  fa:	25 91       	lpm	r18, Z+
  fc:	05 91       	lpm	r16, Z+
  fe:	07 fd       	sbrc	r16, 7
 100:	0c c0       	rjmp	.+24     	; 0x11a <__do_clear_bss>
 102:	95 91       	lpm	r25, Z+
 104:	85 91       	lpm	r24, Z+
 106:	ef 01       	movw	r28, r30
 108:	f9 2f       	mov	r31, r25
 10a:	e8 2f       	mov	r30, r24
 10c:	05 90       	lpm	r0, Z+
 10e:	0d 92       	st	X+, r0
 110:	a2 17       	cp	r26, r18
 112:	b3 07       	cpc	r27, r19
 114:	d9 f7       	brne	.-10     	; 0x10c <__do_copy_data+0x20>
 116:	fe 01       	movw	r30, r28
 118:	04 c0       	rjmp	.+8      	; 0x122 <__do_clear_bss+0x8>

0000011a <__do_clear_bss>:
 11a:	1d 92       	st	X+, r1
 11c:	a2 17       	cp	r26, r18
 11e:	b3 07       	cpc	r27, r19
 120:	e1 f7       	brne	.-8      	; 0x11a <__do_clear_bss>
 122:	e0 3e       	cpi	r30, 0xE0	; 224
 124:	f4 07       	cpc	r31, r20
 126:	31 f7       	brne	.-52     	; 0xf4 <__do_copy_data+0x8>
 128:	0e 94 9d 03 	call	0x73a	; 0x73a <main>
 12c:	0c 94 98 00 	jmp	0x130	; 0x130 <_exit>

00000130 <_exit>:
 130:	f8 94       	cli

00000132 <__stop_program>:
 132:	ff cf       	rjmp	.-2      	; 0x132 <__stop_program>

Disassembly of section .text:

0000142e <__bad_interrupt>:
    142e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.atmel_start_init:

00001422 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
    1422:	0e 94 b0 04 	call	0x960	; 0x960 <system_init>
    1426:	08 95       	ret

Disassembly of section .text.displayOperationValue:

00000cfa <displayOperationValue>:
#include "Tools/MyMath.h"
#include <stdio.h>


void displayOperationValue()
{
 cfa:	0f 93       	push	r16
 cfc:	1f 93       	push	r17
 cfe:	cf 93       	push	r28
 d00:	df 93       	push	r29
 d02:	cd b7       	in	r28, 0x3d	; 61
 d04:	de b7       	in	r29, 0x3e	; 62
 d06:	61 97       	sbiw	r28, 0x11	; 17
 d08:	0f b6       	in	r0, 0x3f	; 63
 d0a:	f8 94       	cli
 d0c:	de bf       	out	0x3e, r29	; 62
 d0e:	0f be       	out	0x3f, r0	; 63
 d10:	cd bf       	out	0x3d, r28	; 61
	char displayLine[17] = "";
 d12:	1a 82       	std	Y+2, r1	; 0x02
 d14:	19 82       	std	Y+1, r1	; 0x01
 d16:	fe 01       	movw	r30, r28
 d18:	33 96       	adiw	r30, 0x03	; 3
 d1a:	8f e0       	ldi	r24, 0x0F	; 15
 d1c:	df 01       	movw	r26, r30
 d1e:	1d 92       	st	X+, r1
 d20:	8a 95       	dec	r24
 d22:	e9 f7       	brne	.-6      	; 0xd1e <displayOperationValue+0x24>
	sprintf(displayLine, "ope:  %.10lu", OperationValue);
 d24:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <OperationValue>
 d28:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <OperationValue+0x1>
 d2c:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <OperationValue+0x2>
 d30:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <OperationValue+0x3>
 d34:	bf 93       	push	r27
 d36:	af 93       	push	r26
 d38:	9f 93       	push	r25
 d3a:	8f 93       	push	r24
 d3c:	84 e3       	ldi	r24, 0x34	; 52
 d3e:	91 e0       	ldi	r25, 0x01	; 1
 d40:	a0 e0       	ldi	r26, 0x00	; 0
 d42:	af 93       	push	r26
 d44:	9f 93       	push	r25
 d46:	8f 93       	push	r24
 d48:	8e 01       	movw	r16, r28
 d4a:	0f 5f       	subi	r16, 0xFF	; 255
 d4c:	1f 4f       	sbci	r17, 0xFF	; 255
 d4e:	1f 93       	push	r17
 d50:	0f 93       	push	r16
 d52:	0e 94 9e 08 	call	0x113c	; 0x113c <sprintf>
	lcd_xy( 0, 0);
 d56:	80 e8       	ldi	r24, 0x80	; 128
 d58:	0e 94 35 09 	call	0x126a	; 0x126a <lcd_command>
	lcd_puts( (void*)displayLine );
 d5c:	c8 01       	movw	r24, r16
 d5e:	0e 94 d7 09 	call	0x13ae	; 0x13ae <lcd_puts>
}
 d62:	0f b6       	in	r0, 0x3f	; 63
 d64:	f8 94       	cli
 d66:	de bf       	out	0x3e, r29	; 62
 d68:	0f be       	out	0x3f, r0	; 63
 d6a:	cd bf       	out	0x3d, r28	; 61
 d6c:	61 96       	adiw	r28, 0x11	; 17
 d6e:	0f b6       	in	r0, 0x3f	; 63
 d70:	f8 94       	cli
 d72:	de bf       	out	0x3e, r29	; 62
 d74:	0f be       	out	0x3f, r0	; 63
 d76:	cd bf       	out	0x3d, r28	; 61
 d78:	df 91       	pop	r29
 d7a:	cf 91       	pop	r28
 d7c:	1f 91       	pop	r17
 d7e:	0f 91       	pop	r16
 d80:	08 95       	ret

Disassembly of section .text.displaySetValue:

00000d82 <displaySetValue>:

void displaySetValue()
{
 d82:	0f 93       	push	r16
 d84:	1f 93       	push	r17
 d86:	cf 93       	push	r28
 d88:	df 93       	push	r29
 d8a:	cd b7       	in	r28, 0x3d	; 61
 d8c:	de b7       	in	r29, 0x3e	; 62
 d8e:	61 97       	sbiw	r28, 0x11	; 17
 d90:	0f b6       	in	r0, 0x3f	; 63
 d92:	f8 94       	cli
 d94:	de bf       	out	0x3e, r29	; 62
 d96:	0f be       	out	0x3f, r0	; 63
 d98:	cd bf       	out	0x3d, r28	; 61
	char displayLine[17] = "";
 d9a:	1a 82       	std	Y+2, r1	; 0x02
 d9c:	19 82       	std	Y+1, r1	; 0x01
 d9e:	fe 01       	movw	r30, r28
 da0:	33 96       	adiw	r30, 0x03	; 3
 da2:	8f e0       	ldi	r24, 0x0F	; 15
 da4:	df 01       	movw	r26, r30
 da6:	1d 92       	st	X+, r1
 da8:	8a 95       	dec	r24
 daa:	e9 f7       	brne	.-6      	; 0xda6 <displaySetValue+0x24>
	sprintf(displayLine, "set:  %.10lu", SetValue);
 dac:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_end>
 db0:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_end+0x1>
 db4:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_end+0x2>
 db8:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_end+0x3>
 dbc:	bf 93       	push	r27
 dbe:	af 93       	push	r26
 dc0:	9f 93       	push	r25
 dc2:	8f 93       	push	r24
 dc4:	81 e4       	ldi	r24, 0x41	; 65
 dc6:	91 e0       	ldi	r25, 0x01	; 1
 dc8:	a0 e0       	ldi	r26, 0x00	; 0
 dca:	af 93       	push	r26
 dcc:	9f 93       	push	r25
 dce:	8f 93       	push	r24
 dd0:	8e 01       	movw	r16, r28
 dd2:	0f 5f       	subi	r16, 0xFF	; 255
 dd4:	1f 4f       	sbci	r17, 0xFF	; 255
 dd6:	1f 93       	push	r17
 dd8:	0f 93       	push	r16
 dda:	0e 94 9e 08 	call	0x113c	; 0x113c <sprintf>
	lcd_xy( 0, 1);
 dde:	80 ec       	ldi	r24, 0xC0	; 192
 de0:	0e 94 35 09 	call	0x126a	; 0x126a <lcd_command>
	lcd_puts( (void*)displayLine );
 de4:	c8 01       	movw	r24, r16
 de6:	0e 94 d7 09 	call	0x13ae	; 0x13ae <lcd_puts>
}
 dea:	0f b6       	in	r0, 0x3f	; 63
 dec:	f8 94       	cli
 dee:	de bf       	out	0x3e, r29	; 62
 df0:	0f be       	out	0x3f, r0	; 63
 df2:	cd bf       	out	0x3d, r28	; 61
 df4:	61 96       	adiw	r28, 0x11	; 17
 df6:	0f b6       	in	r0, 0x3f	; 63
 df8:	f8 94       	cli
 dfa:	de bf       	out	0x3e, r29	; 62
 dfc:	0f be       	out	0x3f, r0	; 63
 dfe:	cd bf       	out	0x3d, r28	; 61
 e00:	df 91       	pop	r29
 e02:	cf 91       	pop	r28
 e04:	1f 91       	pop	r17
 e06:	0f 91       	pop	r16
 e08:	08 95       	ret

Disassembly of section .text.displaySetValModeHome:

000010f0 <displaySetValModeHome>:

void displaySetValModeHome()
{
    10f0:	cf 93       	push	r28
    10f2:	df 93       	push	r29
    10f4:	cd b7       	in	r28, 0x3d	; 61
    10f6:	de b7       	in	r29, 0x3e	; 62
    10f8:	61 97       	sbiw	r28, 0x11	; 17
    10fa:	0f b6       	in	r0, 0x3f	; 63
    10fc:	f8 94       	cli
    10fe:	de bf       	out	0x3e, r29	; 62
    1100:	0f be       	out	0x3f, r0	; 63
    1102:	cd bf       	out	0x3d, r28	; 61
	char displayLine[17] = "Set value config";
    1104:	2e e4       	ldi	r18, 0x4E	; 78
    1106:	31 e0       	ldi	r19, 0x01	; 1
    1108:	40 e0       	ldi	r20, 0x00	; 0
    110a:	81 e1       	ldi	r24, 0x11	; 17
    110c:	f9 01       	movw	r30, r18
    110e:	de 01       	movw	r26, r28
    1110:	11 96       	adiw	r26, 0x01	; 1
    1112:	74 2f       	mov	r23, r20
    1114:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <__movmemx_qi>
	lcd_xy( 0, 0);
    1118:	80 e8       	ldi	r24, 0x80	; 128
    111a:	0e 94 35 09 	call	0x126a	; 0x126a <lcd_command>
	lcd_puts( (void*)displayLine );
    111e:	ce 01       	movw	r24, r28
    1120:	01 96       	adiw	r24, 0x01	; 1
    1122:	0e 94 d7 09 	call	0x13ae	; 0x13ae <lcd_puts>
	displaySetValue();
    1126:	0e 94 c1 06 	call	0xd82	; 0xd82 <displaySetValue>
}
    112a:	61 96       	adiw	r28, 0x11	; 17
    112c:	0f b6       	in	r0, 0x3f	; 63
    112e:	f8 94       	cli
    1130:	de bf       	out	0x3e, r29	; 62
    1132:	0f be       	out	0x3f, r0	; 63
    1134:	cd bf       	out	0x3d, r28	; 61
    1136:	df 91       	pop	r29
    1138:	cf 91       	pop	r28
    113a:	08 95       	ret

Disassembly of section .text.displayProgModeHome:

00000f5a <displayProgModeHome>:

void displayProgModeHome()
{
 f5a:	cf 93       	push	r28
 f5c:	df 93       	push	r29
 f5e:	cd b7       	in	r28, 0x3d	; 61
 f60:	de b7       	in	r29, 0x3e	; 62
 f62:	61 97       	sbiw	r28, 0x11	; 17
 f64:	0f b6       	in	r0, 0x3f	; 63
 f66:	f8 94       	cli
 f68:	de bf       	out	0x3e, r29	; 62
 f6a:	0f be       	out	0x3f, r0	; 63
 f6c:	cd bf       	out	0x3d, r28	; 61
	char displayLine[17] = "Prog mode";
 f6e:	2f e5       	ldi	r18, 0x5F	; 95
 f70:	31 e0       	ldi	r19, 0x01	; 1
 f72:	40 e0       	ldi	r20, 0x00	; 0
 f74:	8a e0       	ldi	r24, 0x0A	; 10
 f76:	f9 01       	movw	r30, r18
 f78:	de 01       	movw	r26, r28
 f7a:	11 96       	adiw	r26, 0x01	; 1
 f7c:	74 2f       	mov	r23, r20
 f7e:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <__movmemx_qi>
 f82:	fe 01       	movw	r30, r28
 f84:	3b 96       	adiw	r30, 0x0b	; 11
 f86:	87 e0       	ldi	r24, 0x07	; 7
 f88:	df 01       	movw	r26, r30
 f8a:	1d 92       	st	X+, r1
 f8c:	8a 95       	dec	r24
 f8e:	e9 f7       	brne	.-6      	; 0xf8a <displayProgModeHome+0x30>
	lcd_xy( 0, 0);
 f90:	80 e8       	ldi	r24, 0x80	; 128
 f92:	0e 94 35 09 	call	0x126a	; 0x126a <lcd_command>
	lcd_puts( (void*)displayLine );
 f96:	ce 01       	movw	r24, r28
 f98:	01 96       	adiw	r24, 0x01	; 1
 f9a:	0e 94 d7 09 	call	0x13ae	; 0x13ae <lcd_puts>
}
 f9e:	61 96       	adiw	r28, 0x11	; 17
 fa0:	0f b6       	in	r0, 0x3f	; 63
 fa2:	f8 94       	cli
 fa4:	de bf       	out	0x3e, r29	; 62
 fa6:	0f be       	out	0x3f, r0	; 63
 fa8:	cd bf       	out	0x3d, r28	; 61
 faa:	df 91       	pop	r29
 fac:	cf 91       	pop	r28
 fae:	08 95       	ret

Disassembly of section .text.ModifSetValue:

00000c60 <ModifSetValue>:
		break;
	}
}

void ModifSetValue(uint32_t digit, uint32_t valueRepresentedByDigit, uint32_t digitOverflowValue)
{
 c60:	8f 92       	push	r8
 c62:	9f 92       	push	r9
 c64:	af 92       	push	r10
 c66:	bf 92       	push	r11
 c68:	cf 92       	push	r12
 c6a:	df 92       	push	r13
 c6c:	ef 92       	push	r14
 c6e:	ff 92       	push	r15
 c70:	0f 93       	push	r16
 c72:	1f 93       	push	r17
	if(SetValue<digitOverflowValue) // Increase digit by 1
 c74:	80 90 06 01 	lds	r8, 0x0106	; 0x800106 <_end>
 c78:	90 90 07 01 	lds	r9, 0x0107	; 0x800107 <_end+0x1>
 c7c:	a0 90 08 01 	lds	r10, 0x0108	; 0x800108 <_end+0x2>
 c80:	b0 90 09 01 	lds	r11, 0x0109	; 0x800109 <_end+0x3>
 c84:	8e 14       	cp	r8, r14
 c86:	9f 04       	cpc	r9, r15
 c88:	a0 06       	cpc	r10, r16
 c8a:	b1 06       	cpc	r11, r17
 c8c:	a8 f4       	brcc	.+42     	; 0xcb8 <ModifSetValue+0x58>
	{
		SetValue += valueRepresentedByDigit;
 c8e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_end>
 c92:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_end+0x1>
 c96:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_end+0x2>
 c9a:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_end+0x3>
 c9e:	82 0f       	add	r24, r18
 ca0:	93 1f       	adc	r25, r19
 ca2:	a4 1f       	adc	r26, r20
 ca4:	b5 1f       	adc	r27, r21
 ca6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_end>
 caa:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_end+0x1>
 cae:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <_end+0x2>
 cb2:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <_end+0x3>
 cb6:	16 c0       	rjmp	.+44     	; 0xce4 <ModifSetValue+0x84>
	}
	else // Set digit to 0
	{
		SetValue -= valueRepresentedByDigit*digit;
 cb8:	c0 90 06 01 	lds	r12, 0x0106	; 0x800106 <_end>
 cbc:	d0 90 07 01 	lds	r13, 0x0107	; 0x800107 <_end+0x1>
 cc0:	e0 90 08 01 	lds	r14, 0x0108	; 0x800108 <_end+0x2>
 cc4:	f0 90 09 01 	lds	r15, 0x0109	; 0x800109 <_end+0x3>
 cc8:	0e 94 aa 09 	call	0x1354	; 0x1354 <__mulsi3>
 ccc:	c6 1a       	sub	r12, r22
 cce:	d7 0a       	sbc	r13, r23
 cd0:	e8 0a       	sbc	r14, r24
 cd2:	f9 0a       	sbc	r15, r25
 cd4:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <_end>
 cd8:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <_end+0x1>
 cdc:	e0 92 08 01 	sts	0x0108, r14	; 0x800108 <_end+0x2>
 ce0:	f0 92 09 01 	sts	0x0109, r15	; 0x800109 <_end+0x3>
	}
 ce4:	1f 91       	pop	r17
 ce6:	0f 91       	pop	r16
 ce8:	ff 90       	pop	r15
 cea:	ef 90       	pop	r14
 cec:	df 90       	pop	r13
 cee:	cf 90       	pop	r12
 cf0:	bf 90       	pop	r11
 cf2:	af 90       	pop	r10
 cf4:	9f 90       	pop	r9
 cf6:	8f 90       	pop	r8
 cf8:	08 95       	ret

Disassembly of section .text.increaseSetValueDigit:

000005cc <increaseSetValueDigit>:
}

// Increase a digit in setValue (for the 10 digits millisecond format)
// index: from 9 at the left (1000000000) to 0 at the right (1)
void increaseSetValueDigit(uint8_t index)
{
 5cc:	8f 92       	push	r8
 5ce:	9f 92       	push	r9
 5d0:	af 92       	push	r10
 5d2:	bf 92       	push	r11
 5d4:	ef 92       	push	r14
 5d6:	ff 92       	push	r15
 5d8:	0f 93       	push	r16
 5da:	1f 93       	push	r17
 5dc:	cf 93       	push	r28
 5de:	c8 2f       	mov	r28, r24
	// Calculate value represented by digit
	uint32_t valueRepresentedByDigit = MyPow(10, index);
 5e0:	68 2f       	mov	r22, r24
 5e2:	8a e0       	ldi	r24, 0x0A	; 10
 5e4:	0e 94 99 09 	call	0x1332	; 0x1332 <MyPow>
 5e8:	4b 01       	movw	r8, r22
 5ea:	5c 01       	movw	r10, r24

	// Calculate digit
	uint32_t digit;
	if(index == 0)
 5ec:	c1 11       	cpse	r28, r1
 5ee:	0f c0       	rjmp	.+30     	; 0x60e <increaseSetValueDigit+0x42>
	{
		digit = SetValue % 10;
 5f0:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <_end>
 5f4:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <_end+0x1>
 5f8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_end+0x2>
 5fc:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_end+0x3>
 600:	2a e0       	ldi	r18, 0x0A	; 10
 602:	30 e0       	ldi	r19, 0x00	; 0
 604:	40 e0       	ldi	r20, 0x00	; 0
 606:	50 e0       	ldi	r21, 0x00	; 0
 608:	0e 94 c1 08 	call	0x1182	; 0x1182 <__udivmodsi4>
 60c:	14 c0       	rjmp	.+40     	; 0x636 <increaseSetValueDigit+0x6a>
	}
	else
	{
		digit = (SetValue / valueRepresentedByDigit) % 10;
 60e:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <_end>
 612:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <_end+0x1>
 616:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_end+0x2>
 61a:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_end+0x3>
 61e:	a5 01       	movw	r20, r10
 620:	94 01       	movw	r18, r8
 622:	0e 94 c1 08 	call	0x1182	; 0x1182 <__udivmodsi4>
 626:	ca 01       	movw	r24, r20
 628:	b9 01       	movw	r22, r18
 62a:	2a e0       	ldi	r18, 0x0A	; 10
 62c:	30 e0       	ldi	r19, 0x00	; 0
 62e:	40 e0       	ldi	r20, 0x00	; 0
 630:	50 e0       	ldi	r21, 0x00	; 0
 632:	0e 94 c1 08 	call	0x1182	; 0x1182 <__udivmodsi4>
	}

	// Modify SetValue according to max value of uint32_t: 4294967295
	switch(index)
 636:	0c 2f       	mov	r16, r28
 638:	10 e0       	ldi	r17, 0x00	; 0
 63a:	0a 30       	cpi	r16, 0x0A	; 10
 63c:	11 05       	cpc	r17, r1
 63e:	08 f0       	brcs	.+2      	; 0x642 <increaseSetValueDigit+0x76>
 640:	72 c0       	rjmp	.+228    	; 0x726 <increaseSetValueDigit+0x15a>
 642:	f8 01       	movw	r30, r16
 644:	e6 5a       	subi	r30, 0xA6	; 166
 646:	ff 4f       	sbci	r31, 0xFF	; 255
 648:	0c 94 03 0a 	jmp	0x1406	; 0x1406 <__tablejump2__>
	{
		case 9:
		ModifSetValue(digit, valueRepresentedByDigit, 3294967295);
 64c:	ee 24       	eor	r14, r14
 64e:	ea 94       	dec	r14
 650:	15 e3       	ldi	r17, 0x35	; 53
 652:	f1 2e       	mov	r15, r17
 654:	05 e6       	ldi	r16, 0x65	; 101
 656:	14 ec       	ldi	r17, 0xC4	; 196
 658:	a5 01       	movw	r20, r10
 65a:	94 01       	movw	r18, r8
 65c:	0e 94 30 06 	call	0xc60	; 0xc60 <ModifSetValue>
		break;
 660:	62 c0       	rjmp	.+196    	; 0x726 <increaseSetValueDigit+0x15a>
		case 8:
		ModifSetValue(digit, valueRepresentedByDigit, 4194967295);
 662:	ee 24       	eor	r14, r14
 664:	ea 94       	dec	r14
 666:	1e e1       	ldi	r17, 0x1E	; 30
 668:	f1 2e       	mov	r15, r17
 66a:	0a e0       	ldi	r16, 0x0A	; 10
 66c:	1a ef       	ldi	r17, 0xFA	; 250
 66e:	a5 01       	movw	r20, r10
 670:	94 01       	movw	r18, r8
 672:	0e 94 30 06 	call	0xc60	; 0xc60 <ModifSetValue>
		break;
 676:	57 c0       	rjmp	.+174    	; 0x726 <increaseSetValueDigit+0x15a>
		case 7:
		ModifSetValue(digit, valueRepresentedByDigit, 4284967295);
 678:	1f e7       	ldi	r17, 0x7F	; 127
 67a:	e1 2e       	mov	r14, r17
 67c:	19 e6       	ldi	r17, 0x69	; 105
 67e:	f1 2e       	mov	r15, r17
 680:	07 e6       	ldi	r16, 0x67	; 103
 682:	1f ef       	ldi	r17, 0xFF	; 255
 684:	a5 01       	movw	r20, r10
 686:	94 01       	movw	r18, r8
 688:	0e 94 30 06 	call	0xc60	; 0xc60 <ModifSetValue>
		break;
 68c:	4c c0       	rjmp	.+152    	; 0x726 <increaseSetValueDigit+0x15a>
		case 6:
		ModifSetValue(digit, valueRepresentedByDigit, 4293967295);
 68e:	1f eb       	ldi	r17, 0xBF	; 191
 690:	e1 2e       	mov	r14, r17
 692:	1d eb       	ldi	r17, 0xBD	; 189
 694:	f1 2e       	mov	r15, r17
 696:	00 ef       	ldi	r16, 0xF0	; 240
 698:	1f ef       	ldi	r17, 0xFF	; 255
 69a:	a5 01       	movw	r20, r10
 69c:	94 01       	movw	r18, r8
 69e:	0e 94 30 06 	call	0xc60	; 0xc60 <ModifSetValue>
		break;
 6a2:	41 c0       	rjmp	.+130    	; 0x726 <increaseSetValueDigit+0x15a>
		case 5:
		ModifSetValue(digit, valueRepresentedByDigit, 4294867295);
 6a4:	1f e5       	ldi	r17, 0x5F	; 95
 6a6:	e1 2e       	mov	r14, r17
 6a8:	19 e7       	ldi	r17, 0x79	; 121
 6aa:	f1 2e       	mov	r15, r17
 6ac:	0e ef       	ldi	r16, 0xFE	; 254
 6ae:	1f ef       	ldi	r17, 0xFF	; 255
 6b0:	a5 01       	movw	r20, r10
 6b2:	94 01       	movw	r18, r8
 6b4:	0e 94 30 06 	call	0xc60	; 0xc60 <ModifSetValue>
		break;
 6b8:	36 c0       	rjmp	.+108    	; 0x726 <increaseSetValueDigit+0x15a>
		case 4:
		ModifSetValue(digit, valueRepresentedByDigit, 4294957295);
 6ba:	1f ee       	ldi	r17, 0xEF	; 239
 6bc:	e1 2e       	mov	r14, r17
 6be:	18 ed       	ldi	r17, 0xD8	; 216
 6c0:	f1 2e       	mov	r15, r17
 6c2:	0f ef       	ldi	r16, 0xFF	; 255
 6c4:	1f ef       	ldi	r17, 0xFF	; 255
 6c6:	a5 01       	movw	r20, r10
 6c8:	94 01       	movw	r18, r8
 6ca:	0e 94 30 06 	call	0xc60	; 0xc60 <ModifSetValue>
		break;
 6ce:	2b c0       	rjmp	.+86     	; 0x726 <increaseSetValueDigit+0x15a>
		case 3:
		ModifSetValue(digit, valueRepresentedByDigit, 4294966295);
 6d0:	17 e1       	ldi	r17, 0x17	; 23
 6d2:	e1 2e       	mov	r14, r17
 6d4:	1c ef       	ldi	r17, 0xFC	; 252
 6d6:	f1 2e       	mov	r15, r17
 6d8:	0f ef       	ldi	r16, 0xFF	; 255
 6da:	1f ef       	ldi	r17, 0xFF	; 255
 6dc:	a5 01       	movw	r20, r10
 6de:	94 01       	movw	r18, r8
 6e0:	0e 94 30 06 	call	0xc60	; 0xc60 <ModifSetValue>
		break;
 6e4:	20 c0       	rjmp	.+64     	; 0x726 <increaseSetValueDigit+0x15a>
		case 2:
		ModifSetValue(digit, valueRepresentedByDigit, 4294967195);
 6e6:	1b e9       	ldi	r17, 0x9B	; 155
 6e8:	e1 2e       	mov	r14, r17
 6ea:	ff 24       	eor	r15, r15
 6ec:	fa 94       	dec	r15
 6ee:	0f ef       	ldi	r16, 0xFF	; 255
 6f0:	1f ef       	ldi	r17, 0xFF	; 255
 6f2:	a5 01       	movw	r20, r10
 6f4:	94 01       	movw	r18, r8
 6f6:	0e 94 30 06 	call	0xc60	; 0xc60 <ModifSetValue>
		break;
 6fa:	15 c0       	rjmp	.+42     	; 0x726 <increaseSetValueDigit+0x15a>
		case 1:
		ModifSetValue(digit, valueRepresentedByDigit, 4294967285);
 6fc:	15 ef       	ldi	r17, 0xF5	; 245
 6fe:	e1 2e       	mov	r14, r17
 700:	ff 24       	eor	r15, r15
 702:	fa 94       	dec	r15
 704:	0f ef       	ldi	r16, 0xFF	; 255
 706:	1f ef       	ldi	r17, 0xFF	; 255
 708:	a5 01       	movw	r20, r10
 70a:	94 01       	movw	r18, r8
 70c:	0e 94 30 06 	call	0xc60	; 0xc60 <ModifSetValue>
		break;
 710:	0a c0       	rjmp	.+20     	; 0x726 <increaseSetValueDigit+0x15a>
		case 0:
		ModifSetValue(digit, valueRepresentedByDigit, 4294967294);
 712:	1e ef       	ldi	r17, 0xFE	; 254
 714:	e1 2e       	mov	r14, r17
 716:	ff 24       	eor	r15, r15
 718:	fa 94       	dec	r15
 71a:	0f ef       	ldi	r16, 0xFF	; 255
 71c:	1f ef       	ldi	r17, 0xFF	; 255
 71e:	a5 01       	movw	r20, r10
 720:	94 01       	movw	r18, r8
 722:	0e 94 30 06 	call	0xc60	; 0xc60 <ModifSetValue>
		break;
	}
}
 726:	cf 91       	pop	r28
 728:	1f 91       	pop	r17
 72a:	0f 91       	pop	r16
 72c:	ff 90       	pop	r15
 72e:	ef 90       	pop	r14
 730:	bf 90       	pop	r11
 732:	af 90       	pop	r10
 734:	9f 90       	pop	r9
 736:	8f 90       	pop	r8
 738:	08 95       	ret

Disassembly of section .text.EEPROM_wait_write_completion:

00001428 <EEPROM_wait_write_completion>:
}

void EEPROM_wait_write_completion()
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE))
    1428:	f9 99       	sbic	0x1f, 1	; 31
    142a:	fe cf       	rjmp	.-4      	; 0x1428 <EEPROM_wait_write_completion>
	;
}
    142c:	08 95       	ret

Disassembly of section .text.EEPROM_write:

000012c4 <EEPROM_write>:
#include "Globals.h"
#include <system.h>
#include <stdio.h>

void EEPROM_write(unsigned int uiAddress, unsigned char ucData)
{
    12c4:	0f 93       	push	r16
    12c6:	1f 93       	push	r17
    12c8:	cf 93       	push	r28
    12ca:	8c 01       	movw	r16, r24
    12cc:	c6 2f       	mov	r28, r22
	/* Wait for completion of previous write */
	EEPROM_wait_write_completion();
    12ce:	0e 94 14 0a 	call	0x1428	; 0x1428 <EEPROM_wait_write_completion>
	/* Set up address and Data Registers */
	EEAR = uiAddress;
    12d2:	12 bd       	out	0x22, r17	; 34
    12d4:	01 bd       	out	0x21, r16	; 33
	EEDR = ucData;
    12d6:	c0 bd       	out	0x20, r28	; 32
	/* Write logical one to EEMPE */
	EECR |= (1<<EEMPE);
    12d8:	8f b3       	in	r24, 0x1f	; 31
    12da:	84 60       	ori	r24, 0x04	; 4
    12dc:	8f bb       	out	0x1f, r24	; 31
	/* Start eeprom write by setting EEPE */
	EECR |= (1<<EEPE);
    12de:	8f b3       	in	r24, 0x1f	; 31
    12e0:	82 60       	ori	r24, 0x02	; 2
    12e2:	8f bb       	out	0x1f, r24	; 31
}
    12e4:	cf 91       	pop	r28
    12e6:	1f 91       	pop	r17
    12e8:	0f 91       	pop	r16
    12ea:	08 95       	ret

Disassembly of section .text.EEPROM_read:

00001392 <EEPROM_read>:

unsigned char EEPROM_read(unsigned int uiAddress)
{
    1392:	cf 93       	push	r28
    1394:	df 93       	push	r29
    1396:	ec 01       	movw	r28, r24
	/* Wait for completion of previous write */
	EEPROM_wait_write_completion();
    1398:	0e 94 14 0a 	call	0x1428	; 0x1428 <EEPROM_wait_write_completion>
	/* Set up address register */
	EEAR = uiAddress;
    139c:	d2 bd       	out	0x22, r29	; 34
    139e:	c1 bd       	out	0x21, r28	; 33
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
    13a0:	8f b3       	in	r24, 0x1f	; 31
    13a2:	81 60       	ori	r24, 0x01	; 1
    13a4:	8f bb       	out	0x1f, r24	; 31
	/* Return data from Data Register */
	return EEDR;
    13a6:	80 b5       	in	r24, 0x20	; 32
}
    13a8:	df 91       	pop	r29
    13aa:	cf 91       	pop	r28
    13ac:	08 95       	ret

Disassembly of section .text.EEPROM_write_setValue:

00000efa <EEPROM_write_setValue>:
	while(EECR & (1<<EEPE))
	;
}

void EEPROM_write_setValue(uint32_t value)
{
 efa:	cf 92       	push	r12
 efc:	df 92       	push	r13
 efe:	ef 92       	push	r14
 f00:	ff 92       	push	r15
 f02:	cf 93       	push	r28
 f04:	df 93       	push	r29
 f06:	6b 01       	movw	r12, r22
 f08:	7c 01       	movw	r14, r24
	for(int i=0; i<4; i++)
 f0a:	c0 e0       	ldi	r28, 0x00	; 0
 f0c:	d0 e0       	ldi	r29, 0x00	; 0
 f0e:	16 c0       	rjmp	.+44     	; 0xf3c <EEPROM_write_setValue+0x42>
	{
		EEPROM_write(EEPROM_SETVALUE_ADDRESS+i, (value >> (8*i)) & 0xff);
 f10:	ce 01       	movw	r24, r28
 f12:	88 0f       	add	r24, r24
 f14:	99 1f       	adc	r25, r25
 f16:	88 0f       	add	r24, r24
 f18:	99 1f       	adc	r25, r25
 f1a:	88 0f       	add	r24, r24
 f1c:	99 1f       	adc	r25, r25
 f1e:	a7 01       	movw	r20, r14
 f20:	96 01       	movw	r18, r12
 f22:	04 c0       	rjmp	.+8      	; 0xf2c <EEPROM_write_setValue+0x32>
 f24:	56 95       	lsr	r21
 f26:	47 95       	ror	r20
 f28:	37 95       	ror	r19
 f2a:	27 95       	ror	r18
 f2c:	8a 95       	dec	r24
 f2e:	d2 f7       	brpl	.-12     	; 0xf24 <EEPROM_write_setValue+0x2a>
 f30:	ca 01       	movw	r24, r20
 f32:	b9 01       	movw	r22, r18
 f34:	ce 01       	movw	r24, r28
 f36:	0e 94 62 09 	call	0x12c4	; 0x12c4 <EEPROM_write>
	;
}

void EEPROM_write_setValue(uint32_t value)
{
	for(int i=0; i<4; i++)
 f3a:	21 96       	adiw	r28, 0x01	; 1
 f3c:	c4 30       	cpi	r28, 0x04	; 4
 f3e:	d1 05       	cpc	r29, r1
 f40:	3c f3       	brlt	.-50     	; 0xf10 <EEPROM_write_setValue+0x16>
	{
		EEPROM_write(EEPROM_SETVALUE_ADDRESS+i, (value >> (8*i)) & 0xff);
	}
	EEPROM_write(EEPROM_SETVALUE_VALID_ADDRESS, VALID_VALUE_FLAG);
 f42:	6f ea       	ldi	r22, 0xAF	; 175
 f44:	84 e0       	ldi	r24, 0x04	; 4
 f46:	90 e0       	ldi	r25, 0x00	; 0
 f48:	0e 94 62 09 	call	0x12c4	; 0x12c4 <EEPROM_write>
}
 f4c:	df 91       	pop	r29
 f4e:	cf 91       	pop	r28
 f50:	ff 90       	pop	r15
 f52:	ef 90       	pop	r14
 f54:	df 90       	pop	r13
 f56:	cf 90       	pop	r12
 f58:	08 95       	ret

Disassembly of section .text.EEPROM_read_setValue:

00000e0a <EEPROM_read_setValue>:

uint32_t EEPROM_read_setValue()
{
 e0a:	cf 92       	push	r12
 e0c:	df 92       	push	r13
 e0e:	ef 92       	push	r14
 e10:	ff 92       	push	r15
 e12:	cf 93       	push	r28
 e14:	df 93       	push	r29
	if(VALID_VALUE_FLAG != EEPROM_read(EEPROM_SETVALUE_VALID_ADDRESS)) // EEPROM value of setValue not initialized (valid)
 e16:	84 e0       	ldi	r24, 0x04	; 4
 e18:	90 e0       	ldi	r25, 0x00	; 0
 e1a:	0e 94 c9 09 	call	0x1392	; 0x1392 <EEPROM_read>
 e1e:	8f 3a       	cpi	r24, 0xAF	; 175
 e20:	29 f0       	breq	.+10     	; 0xe2c <EEPROM_read_setValue+0x22>
	{
		EEPROM_write_setValue(SETVALUE_DEFAULT);
 e22:	60 e0       	ldi	r22, 0x00	; 0
 e24:	70 e0       	ldi	r23, 0x00	; 0
 e26:	cb 01       	movw	r24, r22
 e28:	0e 94 7d 07 	call	0xefa	; 0xefa <EEPROM_write_setValue>
	}
	EEPROM_write(EEPROM_SETVALUE_VALID_ADDRESS, VALID_VALUE_FLAG);
}

uint32_t EEPROM_read_setValue()
{
 e2c:	c0 e0       	ldi	r28, 0x00	; 0
 e2e:	d0 e0       	ldi	r29, 0x00	; 0
 e30:	c1 2c       	mov	r12, r1
 e32:	d1 2c       	mov	r13, r1
 e34:	76 01       	movw	r14, r12
 e36:	19 c0       	rjmp	.+50     	; 0xe6a <EEPROM_read_setValue+0x60>
		EEPROM_write_setValue(SETVALUE_DEFAULT);
	}
	uint32_t l_setValue = 0;
	for(int i=0; i<4; i++)
	{
		l_setValue |= ((uint32_t)EEPROM_read(EEPROM_SETVALUE_ADDRESS+i)) << (8*i);
 e38:	ce 01       	movw	r24, r28
 e3a:	0e 94 c9 09 	call	0x1392	; 0x1392 <EEPROM_read>
 e3e:	90 e0       	ldi	r25, 0x00	; 0
 e40:	a0 e0       	ldi	r26, 0x00	; 0
 e42:	b0 e0       	ldi	r27, 0x00	; 0
 e44:	9e 01       	movw	r18, r28
 e46:	22 0f       	add	r18, r18
 e48:	33 1f       	adc	r19, r19
 e4a:	22 0f       	add	r18, r18
 e4c:	33 1f       	adc	r19, r19
 e4e:	22 0f       	add	r18, r18
 e50:	33 1f       	adc	r19, r19
 e52:	04 c0       	rjmp	.+8      	; 0xe5c <EEPROM_read_setValue+0x52>
 e54:	88 0f       	add	r24, r24
 e56:	99 1f       	adc	r25, r25
 e58:	aa 1f       	adc	r26, r26
 e5a:	bb 1f       	adc	r27, r27
 e5c:	2a 95       	dec	r18
 e5e:	d2 f7       	brpl	.-12     	; 0xe54 <EEPROM_read_setValue+0x4a>
 e60:	c8 2a       	or	r12, r24
 e62:	d9 2a       	or	r13, r25
 e64:	ea 2a       	or	r14, r26
 e66:	fb 2a       	or	r15, r27
	if(VALID_VALUE_FLAG != EEPROM_read(EEPROM_SETVALUE_VALID_ADDRESS)) // EEPROM value of setValue not initialized (valid)
	{
		EEPROM_write_setValue(SETVALUE_DEFAULT);
	}
	uint32_t l_setValue = 0;
	for(int i=0; i<4; i++)
 e68:	21 96       	adiw	r28, 0x01	; 1
 e6a:	c4 30       	cpi	r28, 0x04	; 4
 e6c:	d1 05       	cpc	r29, r1
 e6e:	24 f3       	brlt	.-56     	; 0xe38 <EEPROM_read_setValue+0x2e>
	{
		l_setValue |= ((uint32_t)EEPROM_read(EEPROM_SETVALUE_ADDRESS+i)) << (8*i);
	}
	return l_setValue;
}
 e70:	c7 01       	movw	r24, r14
 e72:	b6 01       	movw	r22, r12
 e74:	df 91       	pop	r29
 e76:	cf 91       	pop	r28
 e78:	ff 90       	pop	r15
 e7a:	ef 90       	pop	r14
 e7c:	df 90       	pop	r13
 e7e:	cf 90       	pop	r12
 e80:	08 95       	ret

Disassembly of section .text.lcd_nibble:

00000fb0 <lcd_nibble>:

void lcd_blank( uint8_t len )                   // blank n digits
{
	while( len-- )
	lcd_putchar( ' ' );
}
     fb0:	9b b1       	in	r25, 0x0b	; 11
     fb2:	9b 7f       	andi	r25, 0xFB	; 251
     fb4:	9b b9       	out	0x0b, r25	; 11
     fb6:	88 23       	and	r24, r24
     fb8:	1c f4       	brge	.+6      	; 0xfc0 <lcd_nibble+0x10>
     fba:	9b b1       	in	r25, 0x0b	; 11
     fbc:	94 60       	ori	r25, 0x04	; 4
     fbe:	9b b9       	out	0x0b, r25	; 11
     fc0:	9b b1       	in	r25, 0x0b	; 11
     fc2:	97 7f       	andi	r25, 0xF7	; 247
     fc4:	9b b9       	out	0x0b, r25	; 11
     fc6:	86 ff       	sbrs	r24, 6
     fc8:	03 c0       	rjmp	.+6      	; 0xfd0 <lcd_nibble+0x20>
     fca:	9b b1       	in	r25, 0x0b	; 11
     fcc:	98 60       	ori	r25, 0x08	; 8
     fce:	9b b9       	out	0x0b, r25	; 11
     fd0:	9b b1       	in	r25, 0x0b	; 11
     fd2:	9f 7e       	andi	r25, 0xEF	; 239
     fd4:	9b b9       	out	0x0b, r25	; 11
     fd6:	85 ff       	sbrs	r24, 5
     fd8:	03 c0       	rjmp	.+6      	; 0xfe0 <lcd_nibble+0x30>
     fda:	9b b1       	in	r25, 0x0b	; 11
     fdc:	90 61       	ori	r25, 0x10	; 16
     fde:	9b b9       	out	0x0b, r25	; 11
     fe0:	95 b1       	in	r25, 0x05	; 5
     fe2:	9b 7f       	andi	r25, 0xFB	; 251
     fe4:	95 b9       	out	0x05, r25	; 5
     fe6:	84 ff       	sbrs	r24, 4
     fe8:	03 c0       	rjmp	.+6      	; 0xff0 <lcd_nibble+0x40>
     fea:	85 b1       	in	r24, 0x05	; 5
     fec:	84 60       	ori	r24, 0x04	; 4
     fee:	85 b9       	out	0x05, r24	; 5
     ff0:	85 b1       	in	r24, 0x05	; 5
     ff2:	88 60       	ori	r24, 0x08	; 8
     ff4:	85 b9       	out	0x05, r24	; 5
     ff6:	85 e0       	ldi	r24, 0x05	; 5
     ff8:	8a 95       	dec	r24
     ffa:	f1 f7       	brne	.-4      	; 0xff8 <lcd_nibble+0x48>
     ffc:	00 00       	nop
     ffe:	85 b1       	in	r24, 0x05	; 5
    1000:	87 7f       	andi	r24, 0xF7	; 247
    1002:	85 b9       	out	0x05, r24	; 5
    1004:	08 95       	ret

Disassembly of section .text.lcd_byte:

00001310 <lcd_byte>:
    1310:	cf 93       	push	r28
    1312:	c8 2f       	mov	r28, r24
    1314:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <lcd_nibble>
    1318:	8c 2f       	mov	r24, r28
    131a:	82 95       	swap	r24
    131c:	80 7f       	andi	r24, 0xF0	; 240
    131e:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <lcd_nibble>
    1322:	87 ec       	ldi	r24, 0xC7	; 199
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	01 97       	sbiw	r24, 0x01	; 1
    1328:	f1 f7       	brne	.-4      	; 0x1326 <lcd_byte+0x16>
    132a:	00 c0       	rjmp	.+0      	; 0x132c <lcd_byte+0x1c>
    132c:	00 00       	nop
    132e:	cf 91       	pop	r28
    1330:	08 95       	ret

Disassembly of section .text.lcd_command:

0000126a <lcd_command>:
    126a:	cf 93       	push	r28
    126c:	c8 2f       	mov	r28, r24
    126e:	85 b1       	in	r24, 0x05	; 5
    1270:	8f 7e       	andi	r24, 0xEF	; 239
    1272:	85 b9       	out	0x05, r24	; 5
    1274:	8c 2f       	mov	r24, r28
    1276:	0e 94 88 09 	call	0x1310	; 0x1310 <lcd_byte>
    127a:	c4 30       	cpi	r28, 0x04	; 4
    127c:	18 f0       	brcs	.+6      	; 0x1284 <lcd_command+0x1a>
    127e:	c0 38       	cpi	r28, 0x80	; 128
    1280:	50 f0       	brcs	.+20     	; 0x1296 <lcd_command+0x2c>
    1282:	07 c0       	rjmp	.+14     	; 0x1292 <lcd_command+0x28>
    1284:	8f e3       	ldi	r24, 0x3F	; 63
    1286:	9f e1       	ldi	r25, 0x1F	; 31
    1288:	01 97       	sbiw	r24, 0x01	; 1
    128a:	f1 f7       	brne	.-4      	; 0x1288 <lcd_command+0x1e>
    128c:	00 c0       	rjmp	.+0      	; 0x128e <lcd_command+0x24>
    128e:	00 00       	nop
    1290:	c0 e8       	ldi	r28, 0x80	; 128
    1292:	c0 93 12 01 	sts	0x0112, r28	; 0x800112 <lcd_pos>
    1296:	cf 91       	pop	r28
    1298:	08 95       	ret

Disassembly of section .text.lcd_putchar:

0000129a <lcd_putchar>:
    129a:	95 b1       	in	r25, 0x05	; 5
    129c:	90 61       	ori	r25, 0x10	; 16
    129e:	95 b9       	out	0x05, r25	; 5
    12a0:	0e 94 88 09 	call	0x1310	; 0x1310 <lcd_byte>
    12a4:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <lcd_pos>
    12a8:	8f 5f       	subi	r24, 0xFF	; 255
    12aa:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <lcd_pos>
    12ae:	80 39       	cpi	r24, 0x90	; 144
    12b0:	19 f0       	breq	.+6      	; 0x12b8 <lcd_putchar+0x1e>
    12b2:	80 3d       	cpi	r24, 0xD0	; 208
    12b4:	19 f0       	breq	.+6      	; 0x12bc <lcd_putchar+0x22>
    12b6:	08 95       	ret
    12b8:	80 ec       	ldi	r24, 0xC0	; 192
    12ba:	01 c0       	rjmp	.+2      	; 0x12be <lcd_putchar+0x24>
    12bc:	80 e8       	ldi	r24, 0x80	; 128
    12be:	0e 94 35 09 	call	0x126a	; 0x126a <lcd_command>
    12c2:	08 95       	ret

Disassembly of section .text.lcd_puts:

000013ae <lcd_puts>:
    13ae:	cf 93       	push	r28
    13b0:	df 93       	push	r29
    13b2:	ec 01       	movw	r28, r24
    13b4:	03 c0       	rjmp	.+6      	; 0x13bc <lcd_puts+0xe>
    13b6:	0e 94 4d 09 	call	0x129a	; 0x129a <lcd_putchar>
    13ba:	21 96       	adiw	r28, 0x01	; 1
    13bc:	88 81       	ld	r24, Y
    13be:	81 11       	cpse	r24, r1
    13c0:	fa cf       	rjmp	.-12     	; 0x13b6 <lcd_puts+0x8>
    13c2:	df 91       	pop	r29
    13c4:	cf 91       	pop	r28
    13c6:	08 95       	ret

Disassembly of section .text.lcd_clear:

00001412 <lcd_clear>:


void lcd_clear( void )
{
	lcd_command( 0x01 );
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	0e 94 35 09 	call	0x126a	; 0x126a <lcd_command>
    1418:	08 95       	ret

Disassembly of section .text.lcd_init:

00000bbc <lcd_init>:

void lcd_blank( uint8_t len )                   // blank n digits
{
	while( len-- )
	lcd_putchar( ' ' );
}
 bbc:	84 b1       	in	r24, 0x04	; 4
 bbe:	84 60       	ori	r24, 0x04	; 4
 bc0:	84 b9       	out	0x04, r24	; 4
 bc2:	8a b1       	in	r24, 0x0a	; 10
 bc4:	80 61       	ori	r24, 0x10	; 16
 bc6:	8a b9       	out	0x0a, r24	; 10
 bc8:	8a b1       	in	r24, 0x0a	; 10
 bca:	88 60       	ori	r24, 0x08	; 8
 bcc:	8a b9       	out	0x0a, r24	; 10
 bce:	8a b1       	in	r24, 0x0a	; 10
 bd0:	84 60       	ori	r24, 0x04	; 4
 bd2:	8a b9       	out	0x0a, r24	; 10
 bd4:	84 b1       	in	r24, 0x04	; 4
 bd6:	80 61       	ori	r24, 0x10	; 16
 bd8:	84 b9       	out	0x04, r24	; 4
 bda:	84 b1       	in	r24, 0x04	; 4
 bdc:	88 60       	ori	r24, 0x08	; 8
 bde:	84 b9       	out	0x04, r24	; 4
 be0:	85 b1       	in	r24, 0x05	; 5
 be2:	87 7f       	andi	r24, 0xF7	; 247
 be4:	85 b9       	out	0x05, r24	; 5
 be6:	85 b1       	in	r24, 0x05	; 5
 be8:	8f 7e       	andi	r24, 0xEF	; 239
 bea:	85 b9       	out	0x05, r24	; 5
 bec:	8f e5       	ldi	r24, 0x5F	; 95
 bee:	9a ee       	ldi	r25, 0xEA	; 234
 bf0:	01 97       	sbiw	r24, 0x01	; 1
 bf2:	f1 f7       	brne	.-4      	; 0xbf0 <lcd_init+0x34>
 bf4:	00 c0       	rjmp	.+0      	; 0xbf6 <lcd_init+0x3a>
 bf6:	00 00       	nop
 bf8:	80 e3       	ldi	r24, 0x30	; 48
 bfa:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <lcd_nibble>
 bfe:	8f e0       	ldi	r24, 0x0F	; 15
 c00:	90 e4       	ldi	r25, 0x40	; 64
 c02:	01 97       	sbiw	r24, 0x01	; 1
 c04:	f1 f7       	brne	.-4      	; 0xc02 <lcd_init+0x46>
 c06:	00 c0       	rjmp	.+0      	; 0xc08 <lcd_init+0x4c>
 c08:	00 00       	nop
 c0a:	80 e3       	ldi	r24, 0x30	; 48
 c0c:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <lcd_nibble>
 c10:	8f e8       	ldi	r24, 0x8F	; 143
 c12:	91 e0       	ldi	r25, 0x01	; 1
 c14:	01 97       	sbiw	r24, 0x01	; 1
 c16:	f1 f7       	brne	.-4      	; 0xc14 <lcd_init+0x58>
 c18:	00 c0       	rjmp	.+0      	; 0xc1a <lcd_init+0x5e>
 c1a:	00 00       	nop
 c1c:	80 e3       	ldi	r24, 0x30	; 48
 c1e:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <lcd_nibble>
 c22:	87 ec       	ldi	r24, 0xC7	; 199
 c24:	90 e0       	ldi	r25, 0x00	; 0
 c26:	01 97       	sbiw	r24, 0x01	; 1
 c28:	f1 f7       	brne	.-4      	; 0xc26 <lcd_init+0x6a>
 c2a:	00 c0       	rjmp	.+0      	; 0xc2c <lcd_init+0x70>
 c2c:	00 00       	nop
 c2e:	80 e2       	ldi	r24, 0x20	; 32
 c30:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <lcd_nibble>
 c34:	87 ec       	ldi	r24, 0xC7	; 199
 c36:	90 e0       	ldi	r25, 0x00	; 0
 c38:	01 97       	sbiw	r24, 0x01	; 1
 c3a:	f1 f7       	brne	.-4      	; 0xc38 <lcd_init+0x7c>
 c3c:	00 c0       	rjmp	.+0      	; 0xc3e <lcd_init+0x82>
 c3e:	00 00       	nop
 c40:	88 e2       	ldi	r24, 0x28	; 40
 c42:	0e 94 35 09 	call	0x126a	; 0x126a <lcd_command>
 c46:	88 e0       	ldi	r24, 0x08	; 8
 c48:	0e 94 35 09 	call	0x126a	; 0x126a <lcd_command>
 c4c:	81 e0       	ldi	r24, 0x01	; 1
 c4e:	0e 94 35 09 	call	0x126a	; 0x126a <lcd_command>
 c52:	86 e0       	ldi	r24, 0x06	; 6
 c54:	0e 94 35 09 	call	0x126a	; 0x126a <lcd_command>
 c58:	8c e0       	ldi	r24, 0x0C	; 12
 c5a:	0e 94 35 09 	call	0x126a	; 0x126a <lcd_command>
 c5e:	08 95       	ret

Disassembly of section .text.lcd_nocursor_noblink:

0000141a <lcd_nocursor_noblink>:
	lcd_command( 0x0C );                          // on, no cursor, no blink
}

void lcd_nocursor_noblink( void )
{
	lcd_command( 0x0C ); // on, no cursor, no blink
    141a:	8c e0       	ldi	r24, 0x0C	; 12
    141c:	0e 94 35 09 	call	0x126a	; 0x126a <lcd_command>
    1420:	08 95       	ret

Disassembly of section .text.lcd_cursor_blink:

000012ec <lcd_cursor_blink>:

void lcd_blank( uint8_t len )                   // blank n digits
{
	while( len-- )
	lcd_putchar( ' ' );
}
    12ec:	cf 93       	push	r28
    12ee:	df 93       	push	r29
    12f0:	c8 2f       	mov	r28, r24
    12f2:	d6 2f       	mov	r29, r22
    12f4:	8f e0       	ldi	r24, 0x0F	; 15
    12f6:	0e 94 35 09 	call	0x126a	; 0x126a <lcd_command>
    12fa:	d1 30       	cpi	r29, 0x01	; 1
    12fc:	11 f4       	brne	.+4      	; 0x1302 <lcd_cursor_blink+0x16>
    12fe:	80 ec       	ldi	r24, 0xC0	; 192
    1300:	01 c0       	rjmp	.+2      	; 0x1304 <lcd_cursor_blink+0x18>
    1302:	80 e8       	ldi	r24, 0x80	; 128
    1304:	8c 0f       	add	r24, r28
    1306:	0e 94 35 09 	call	0x126a	; 0x126a <lcd_command>
    130a:	df 91       	pop	r29
    130c:	cf 91       	pop	r28
    130e:	08 95       	ret

Disassembly of section .text.IntentionActionner:

0000086a <IntentionActionner>:
	}
}


void IntentionActionner(Intention *intention)
{
 86a:	1f 93       	push	r17
 86c:	cf 93       	push	r28
 86e:	df 93       	push	r29
 870:	ec 01       	movw	r28, r24
	switch(*intention)
 872:	88 81       	ld	r24, Y
 874:	83 30       	cpi	r24, 0x03	; 3
 876:	61 f1       	breq	.+88     	; 0x8d0 <IntentionActionner+0x66>
 878:	28 f4       	brcc	.+10     	; 0x884 <IntentionActionner+0x1a>
 87a:	81 30       	cpi	r24, 0x01	; 1
 87c:	59 f0       	breq	.+22     	; 0x894 <IntentionActionner+0x2a>
 87e:	82 30       	cpi	r24, 0x02	; 2
 880:	d1 f0       	breq	.+52     	; 0x8b6 <IntentionActionner+0x4c>
 882:	6a c0       	rjmp	.+212    	; 0x958 <__stack+0x59>
 884:	85 30       	cpi	r24, 0x05	; 5
 886:	09 f4       	brne	.+2      	; 0x88a <IntentionActionner+0x20>
 888:	4b c0       	rjmp	.+150    	; 0x920 <__stack+0x21>
 88a:	90 f1       	brcs	.+100    	; 0x8f0 <IntentionActionner+0x86>
 88c:	86 30       	cpi	r24, 0x06	; 6
 88e:	09 f4       	brne	.+2      	; 0x892 <IntentionActionner+0x28>
 890:	58 c0       	rjmp	.+176    	; 0x942 <__stack+0x43>
 892:	62 c0       	rjmp	.+196    	; 0x958 <__stack+0x59>
		case Idle:
		break;

		////////////////////////////////////////////////////////////////////////// SetVal mode
		case SetValModeEntry:
		lcd_clear();
 894:	0e 94 09 0a 	call	0x1412	; 0x1412 <lcd_clear>
		displaySetValModeHome();
 898:	0e 94 78 08 	call	0x10f0	; 0x10f0 <displaySetValModeHome>
		cursor_x = 6; cursor_y = 1;
 89c:	86 e0       	ldi	r24, 0x06	; 6
 89e:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <cursor_x>
 8a2:	11 e0       	ldi	r17, 0x01	; 1
 8a4:	10 93 0e 01 	sts	0x010E, r17	; 0x80010e <cursor_y>
		lcd_cursor_blink(cursor_x, cursor_y);
 8a8:	61 e0       	ldi	r22, 0x01	; 1
 8aa:	0e 94 76 09 	call	0x12ec	; 0x12ec <lcd_cursor_blink>
		SetValMode = true;
 8ae:	10 93 10 01 	sts	0x0110, r17	; 0x800110 <SetValMode>
		*intention = Idle;
 8b2:	18 82       	st	Y, r1
		break;
 8b4:	51 c0       	rjmp	.+162    	; 0x958 <__stack+0x59>

		case ShiftInSetValMode:
		if(cursor_x < 15)
 8b6:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <cursor_x>
 8ba:	8f 30       	cpi	r24, 0x0F	; 15
 8bc:	38 f4       	brcc	.+14     	; 0x8cc <IntentionActionner+0x62>
		{
			lcd_cursor_blink(++cursor_x, cursor_y);
 8be:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <cursor_y>
 8c2:	8f 5f       	subi	r24, 0xFF	; 255
 8c4:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <cursor_x>
 8c8:	0e 94 76 09 	call	0x12ec	; 0x12ec <lcd_cursor_blink>
		}
		*intention = Idle;
 8cc:	18 82       	st	Y, r1
		break;
 8ce:	44 c0       	rjmp	.+136    	; 0x958 <__stack+0x59>

		case IncreaseInSetValMode:
		increaseSetValueDigit(9 -(cursor_x - 6));
 8d0:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <cursor_x>
 8d4:	8f e0       	ldi	r24, 0x0F	; 15
 8d6:	89 1b       	sub	r24, r25
 8d8:	0e 94 e6 02 	call	0x5cc	; 0x5cc <increaseSetValueDigit>
		displaySetValue();
 8dc:	0e 94 c1 06 	call	0xd82	; 0xd82 <displaySetValue>
		lcd_cursor_blink(cursor_x, cursor_y);
 8e0:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <cursor_y>
 8e4:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <cursor_x>
 8e8:	0e 94 76 09 	call	0x12ec	; 0x12ec <lcd_cursor_blink>
		*intention = Idle;
 8ec:	18 82       	st	Y, r1
		break;
 8ee:	34 c0       	rjmp	.+104    	; 0x958 <__stack+0x59>

		case SetValModeExit:
		EEPROM_write_setValue(SetValue);
 8f0:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <_end>
 8f4:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <_end+0x1>
 8f8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_end+0x2>
 8fc:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_end+0x3>
 900:	0e 94 7d 07 	call	0xefa	; 0xefa <EEPROM_write_setValue>
		EEPROM_wait_write_completion();
 904:	0e 94 14 0a 	call	0x1428	; 0x1428 <EEPROM_wait_write_completion>
		lcd_clear();
 908:	0e 94 09 0a 	call	0x1412	; 0x1412 <lcd_clear>
		displayOperationValue();
 90c:	0e 94 7d 06 	call	0xcfa	; 0xcfa <displayOperationValue>
		displaySetValue();
 910:	0e 94 c1 06 	call	0xd82	; 0xd82 <displaySetValue>
		lcd_nocursor_noblink();
 914:	0e 94 0d 0a 	call	0x141a	; 0x141a <lcd_nocursor_noblink>
		SetValMode = false;
 918:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <SetValMode>
		*intention = Idle;
 91c:	18 82       	st	Y, r1
		break;
 91e:	1c c0       	rjmp	.+56     	; 0x958 <__stack+0x59>

		////////////////////////////////////////////////////////////////////////// Prog mode
		case ProgModeEntry:
		lcd_clear();
 920:	0e 94 09 0a 	call	0x1412	; 0x1412 <lcd_clear>
		displayProgModeHome();
 924:	0e 94 ad 07 	call	0xf5a	; 0xf5a <displayProgModeHome>
		cursor_x = 15; cursor_y = 1;
 928:	8f e0       	ldi	r24, 0x0F	; 15
 92a:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <cursor_x>
 92e:	11 e0       	ldi	r17, 0x01	; 1
 930:	10 93 0e 01 	sts	0x010E, r17	; 0x80010e <cursor_y>
		lcd_cursor_blink(cursor_x, cursor_y);
 934:	61 e0       	ldi	r22, 0x01	; 1
 936:	0e 94 76 09 	call	0x12ec	; 0x12ec <lcd_cursor_blink>
		ProgMode = true;
 93a:	10 93 11 01 	sts	0x0111, r17	; 0x800111 <ProgMode>
		*intention = Idle;
 93e:	18 82       	st	Y, r1
		break;
 940:	0b c0       	rjmp	.+22     	; 0x958 <__stack+0x59>

		case ProgModeExit:
		lcd_clear();
 942:	0e 94 09 0a 	call	0x1412	; 0x1412 <lcd_clear>
		displayOperationValue();
 946:	0e 94 7d 06 	call	0xcfa	; 0xcfa <displayOperationValue>
		displaySetValue();
 94a:	0e 94 c1 06 	call	0xd82	; 0xd82 <displaySetValue>
		lcd_nocursor_noblink();
 94e:	0e 94 0d 0a 	call	0x141a	; 0x141a <lcd_nocursor_noblink>
		ProgMode = false;
 952:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <ProgMode>
		*intention = Idle;
 956:	18 82       	st	Y, r1
		break;
	}
}
 958:	df 91       	pop	r29
 95a:	cf 91       	pop	r28
 95c:	1f 91       	pop	r17
 95e:	08 95       	ret

Disassembly of section .text.main:

0000073a <main>:

const char Revision[9] = "00.00.13";


int main(void)
{
 73a:	cd b7       	in	r28, 0x3d	; 61
 73c:	de b7       	in	r29, 0x3e	; 62
 73e:	62 97       	sbiw	r28, 0x12	; 18
 740:	de bf       	out	0x3e, r29	; 62
 742:	cd bf       	out	0x3d, r28	; 61
	/************************************************************************/
	/* Define/declare some variables                                        */
	/************************************************************************/
	// Intention for the process of "intention building" and "intention actioning"
	Intention intention = Idle;
 744:	19 82       	std	Y+1, r1	; 0x01

	/************************************************************************/
	/* Some initializations                                                 */
	/************************************************************************/
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
 746:	0e 94 11 0a 	call	0x1422	; 0x1422 <atmel_start_init>
	lcd_init();
 74a:	0e 94 de 05 	call	0xbbc	; 0xbbc <lcd_init>

	// Get some values from EEPROM
	SetValue = EEPROM_read_setValue();
 74e:	0e 94 05 07 	call	0xe0a	; 0xe0a <EEPROM_read_setValue>
 752:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <_end>
 756:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <_end+0x1>
 75a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_end+0x2>
 75e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_end+0x3>

	// Display Revision
	lcd_xy( 0, 0);
 762:	80 e8       	ldi	r24, 0x80	; 128
 764:	0e 94 35 09 	call	0x126a	; 0x126a <lcd_command>
	char RevisionDisplay[17];
	sprintf(RevisionDisplay, "Revision%s", Revision);
 768:	8b e7       	ldi	r24, 0x7B	; 123
 76a:	91 e0       	ldi	r25, 0x01	; 1
 76c:	a0 e0       	ldi	r26, 0x00	; 0
 76e:	af 93       	push	r26
 770:	9f 93       	push	r25
 772:	8f 93       	push	r24
 774:	80 e7       	ldi	r24, 0x70	; 112
 776:	91 e0       	ldi	r25, 0x01	; 1
 778:	a0 e0       	ldi	r26, 0x00	; 0
 77a:	af 93       	push	r26
 77c:	9f 93       	push	r25
 77e:	8f 93       	push	r24
 780:	8e 01       	movw	r16, r28
 782:	0e 5f       	subi	r16, 0xFE	; 254
 784:	1f 4f       	sbci	r17, 0xFF	; 255
 786:	1f 93       	push	r17
 788:	0f 93       	push	r16
 78a:	0e 94 9e 08 	call	0x113c	; 0x113c <sprintf>
	lcd_puts( (void*)RevisionDisplay );
 78e:	c8 01       	movw	r24, r16
 790:	0e 94 d7 09 	call	0x13ae	; 0x13ae <lcd_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 794:	2f ef       	ldi	r18, 0xFF	; 255
 796:	87 ea       	ldi	r24, 0xA7	; 167
 798:	91 e6       	ldi	r25, 0x61	; 97
 79a:	21 50       	subi	r18, 0x01	; 1
 79c:	80 40       	sbci	r24, 0x00	; 0
 79e:	90 40       	sbci	r25, 0x00	; 0
 7a0:	e1 f7       	brne	.-8      	; 0x79a <main+0x60>
 7a2:	00 c0       	rjmp	.+0      	; 0x7a4 <main+0x6a>
 7a4:	00 00       	nop
	_delay_ms(2000);

	// Display welcome screen
	displayOperationValue();
 7a6:	0e 94 7d 06 	call	0xcfa	; 0xcfa <displayOperationValue>
	displaySetValue();
 7aa:	0e 94 c1 06 	call	0xd82	; 0xd82 <displaySetValue>
	
	// Enable interrupts (switches, etc...)
	sei();
 7ae:	78 94       	sei
 7b0:	0f b6       	in	r0, 0x3f	; 63
 7b2:	f8 94       	cli
 7b4:	de bf       	out	0x3e, r29	; 62
 7b6:	0f be       	out	0x3f, r0	; 63
 7b8:	cd bf       	out	0x3d, r28	; 61
 7ba:	8f e3       	ldi	r24, 0x3F	; 63
 7bc:	9c e9       	ldi	r25, 0x9C	; 156
 7be:	01 97       	sbiw	r24, 0x01	; 1
 7c0:	f1 f7       	brne	.-4      	; 0x7be <main+0x84>
 7c2:	00 c0       	rjmp	.+0      	; 0x7c4 <main+0x8a>
 7c4:	00 00       	nop
		/************************************************************************/
		/* Build an intention (switch press understanding)                      */
		/************************************************************************/
		////////////////////////////////////////////////////////////////////////// SetVal mode
		// Enter SetVal mode (shift button outside SetVal mode)
		if(SW_2_TO_PROCESS && !SetValMode)
 7c6:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <SW_2_TO_PROCESS>
 7ca:	88 23       	and	r24, r24
 7cc:	49 f0       	breq	.+18     	; 0x7e0 <main+0xa6>
 7ce:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <SetValMode>
 7d2:	81 11       	cpse	r24, r1
 7d4:	05 c0       	rjmp	.+10     	; 0x7e0 <main+0xa6>
		{
			intention = SetValModeEntry;
 7d6:	81 e0       	ldi	r24, 0x01	; 1
 7d8:	89 83       	std	Y+1, r24	; 0x01
			SW_2_TO_PROCESS = false;
 7da:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <SW_2_TO_PROCESS>
 7de:	40 c0       	rjmp	.+128    	; 0x860 <__DATA_REGION_LENGTH__+0x60>
		}
		// Shift during SetVal mode
		else if (SW_2_TO_PROCESS && SetValMode)
 7e0:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <SW_2_TO_PROCESS>
 7e4:	88 23       	and	r24, r24
 7e6:	49 f0       	breq	.+18     	; 0x7fa <main+0xc0>
 7e8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <SetValMode>
 7ec:	88 23       	and	r24, r24
 7ee:	29 f0       	breq	.+10     	; 0x7fa <main+0xc0>
		{
			intention = ShiftInSetValMode;
 7f0:	82 e0       	ldi	r24, 0x02	; 2
 7f2:	89 83       	std	Y+1, r24	; 0x01
			SW_2_TO_PROCESS = false;
 7f4:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <SW_2_TO_PROCESS>
 7f8:	33 c0       	rjmp	.+102    	; 0x860 <__DATA_REGION_LENGTH__+0x60>
		}
		// Increase during SetVal mode
		else if (SW_3_TO_PROCESS && SetValMode)
 7fa:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <SW_3_TO_PROCESS>
 7fe:	88 23       	and	r24, r24
 800:	49 f0       	breq	.+18     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 802:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <SetValMode>
 806:	88 23       	and	r24, r24
 808:	29 f0       	breq	.+10     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
		{
			intention = IncreaseInSetValMode;
 80a:	83 e0       	ldi	r24, 0x03	; 3
 80c:	89 83       	std	Y+1, r24	; 0x01
			SW_3_TO_PROCESS = false;
 80e:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <SW_3_TO_PROCESS>
 812:	26 c0       	rjmp	.+76     	; 0x860 <__DATA_REGION_LENGTH__+0x60>
		}
		// Exit SetVal mode (enter button in SetVal mode)
		else if (SW_4_TO_PROCESS && SetValMode)
 814:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <SW_4_TO_PROCESS>
 818:	88 23       	and	r24, r24
 81a:	49 f0       	breq	.+18     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 81c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <SetValMode>
 820:	88 23       	and	r24, r24
 822:	29 f0       	breq	.+10     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
		{
			intention = SetValModeExit;
 824:	84 e0       	ldi	r24, 0x04	; 4
 826:	89 83       	std	Y+1, r24	; 0x01
			SW_4_TO_PROCESS = false;
 828:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <SW_4_TO_PROCESS>
 82c:	19 c0       	rjmp	.+50     	; 0x860 <__DATA_REGION_LENGTH__+0x60>
		}
		////////////////////////////////////////////////////////////////////////// Prog mode
		// Enter prog mode
		else if (SW_1_TO_PROCESS && !ProgMode)
 82e:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <SW_1_TO_PROCESS>
 832:	88 23       	and	r24, r24
 834:	49 f0       	breq	.+18     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 836:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <ProgMode>
 83a:	81 11       	cpse	r24, r1
 83c:	05 c0       	rjmp	.+10     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
		{
			intention = ProgModeEntry;
 83e:	85 e0       	ldi	r24, 0x05	; 5
 840:	89 83       	std	Y+1, r24	; 0x01
			SW_1_TO_PROCESS = false;
 842:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <SW_1_TO_PROCESS>
 846:	0c c0       	rjmp	.+24     	; 0x860 <__DATA_REGION_LENGTH__+0x60>
		}
		//Exit prog mode
		else if (SW_1_TO_PROCESS && ProgMode)
 848:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <SW_1_TO_PROCESS>
 84c:	88 23       	and	r24, r24
 84e:	41 f0       	breq	.+16     	; 0x860 <__DATA_REGION_LENGTH__+0x60>
 850:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <ProgMode>
 854:	88 23       	and	r24, r24
 856:	21 f0       	breq	.+8      	; 0x860 <__DATA_REGION_LENGTH__+0x60>
		{
			intention = ProgModeExit;
 858:	86 e0       	ldi	r24, 0x06	; 6
 85a:	89 83       	std	Y+1, r24	; 0x01
			SW_1_TO_PROCESS = false;
 85c:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <SW_1_TO_PROCESS>
		}

		/************************************************************************/
		/* Action the intention                                                 */
		/************************************************************************/
		IntentionActionner(&intention);
 860:	ce 01       	movw	r24, r28
 862:	01 96       	adiw	r24, 0x01	; 1
 864:	0e 94 35 04 	call	0x86a	; 0x86a <IntentionActionner>
	}
 868:	a8 cf       	rjmp	.-176    	; 0x7ba <main+0x80>

Disassembly of section .text.system_init:

00000960 <system_init>:
		break;
	case PORT_DIR_OUT:
		DDRB |= mask;
		break;
	case PORT_DIR_OFF:
		DDRB &= ~mask;
 960:	84 b1       	in	r24, 0x04	; 4
 962:	14 b8       	out	0x04, r1	; 4

		PORTB |= mask;
 964:	85 b1       	in	r24, 0x05	; 5
 966:	9f ef       	ldi	r25, 0xFF	; 255
 968:	95 b9       	out	0x05, r25	; 5
		break;
	case PORT_DIR_OUT:
		DDRC |= mask;
		break;
	case PORT_DIR_OFF:
		DDRC &= ~mask;
 96a:	87 b1       	in	r24, 0x07	; 7
 96c:	80 78       	andi	r24, 0x80	; 128
 96e:	87 b9       	out	0x07, r24	; 7

		PORTC |= mask;
 970:	88 b1       	in	r24, 0x08	; 8
 972:	8f 67       	ori	r24, 0x7F	; 127
 974:	88 b9       	out	0x08, r24	; 8
		break;
	case PORT_DIR_OUT:
		DDRD |= mask;
		break;
	case PORT_DIR_OFF:
		DDRD &= ~mask;
 976:	8a b1       	in	r24, 0x0a	; 10
 978:	1a b8       	out	0x0a, r1	; 10

		PORTD |= mask;
 97a:	8b b1       	in	r24, 0x0b	; 11
 97c:	9b b9       	out	0x0b, r25	; 11
		break;
	case PORT_DIR_OUT:
		DDRE |= mask;
		break;
	case PORT_DIR_OFF:
		DDRE &= ~mask;
 97e:	8d b1       	in	r24, 0x0d	; 13
 980:	80 7f       	andi	r24, 0xF0	; 240
 982:	8d b9       	out	0x0d, r24	; 13

		PORTE |= mask;
 984:	8e b1       	in	r24, 0x0e	; 14
 986:	8f 60       	ori	r24, 0x0F	; 15
 988:	8e b9       	out	0x0e, r24	; 14
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRB |= 1 << pin;
 98a:	84 b1       	in	r24, 0x04	; 4
 98c:	84 60       	ori	r24, 0x04	; 4
 98e:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
	} else {
		PORTB &= ~(1 << pin);
 990:	85 b1       	in	r24, 0x05	; 5
 992:	8b 7f       	andi	r24, 0xFB	; 251
 994:	85 b9       	out	0x05, r24	; 5
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRB |= 1 << pin;
 996:	84 b1       	in	r24, 0x04	; 4
 998:	88 60       	ori	r24, 0x08	; 8
 99a:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
	} else {
		PORTB &= ~(1 << pin);
 99c:	85 b1       	in	r24, 0x05	; 5
 99e:	87 7f       	andi	r24, 0xF7	; 247
 9a0:	85 b9       	out	0x05, r24	; 5
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRB |= 1 << pin;
 9a2:	84 b1       	in	r24, 0x04	; 4
 9a4:	80 61       	ori	r24, 0x10	; 16
 9a6:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
	} else {
		PORTB &= ~(1 << pin);
 9a8:	85 b1       	in	r24, 0x05	; 5
 9aa:	8f 7e       	andi	r24, 0xEF	; 239
 9ac:	85 b9       	out	0x05, r24	; 5
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRD |= 1 << pin;
 9ae:	8a b1       	in	r24, 0x0a	; 10
 9b0:	88 60       	ori	r24, 0x08	; 8
 9b2:	8a b9       	out	0x0a, r24	; 10
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
	} else {
		PORTD &= ~(1 << pin);
 9b4:	8b b1       	in	r24, 0x0b	; 11
 9b6:	87 7f       	andi	r24, 0xF7	; 247
 9b8:	8b b9       	out	0x0b, r24	; 11
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRD |= 1 << pin;
 9ba:	8a b1       	in	r24, 0x0a	; 10
 9bc:	80 61       	ori	r24, 0x10	; 16
 9be:	8a b9       	out	0x0a, r24	; 10
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
	} else {
		PORTD &= ~(1 << pin);
 9c0:	8b b1       	in	r24, 0x0b	; 11
 9c2:	8f 7e       	andi	r24, 0xEF	; 239
 9c4:	8b b9       	out	0x0b, r24	; 11
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRC &= ~(1 << pin);
 9c6:	87 b1       	in	r24, 0x07	; 7
 9c8:	8e 7f       	andi	r24, 0xFE	; 254
 9ca:	87 b9       	out	0x07, r24	; 7
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{

	if (pull_mode == PORT_PULL_UP) {

		DDRC &= ~(1 << pin);
 9cc:	87 b1       	in	r24, 0x07	; 7
 9ce:	8e 7f       	andi	r24, 0xFE	; 254
 9d0:	87 b9       	out	0x07, r24	; 7

		PORTC |= 1 << pin;
 9d2:	88 b1       	in	r24, 0x08	; 8
 9d4:	81 60       	ori	r24, 0x01	; 1
 9d6:	88 b9       	out	0x08, r24	; 8
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRC &= ~(1 << pin);
 9d8:	87 b1       	in	r24, 0x07	; 7
 9da:	8d 7f       	andi	r24, 0xFD	; 253
 9dc:	87 b9       	out	0x07, r24	; 7
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{

	if (pull_mode == PORT_PULL_UP) {

		DDRC &= ~(1 << pin);
 9de:	87 b1       	in	r24, 0x07	; 7
 9e0:	8d 7f       	andi	r24, 0xFD	; 253
 9e2:	87 b9       	out	0x07, r24	; 7

		PORTC |= 1 << pin;
 9e4:	88 b1       	in	r24, 0x08	; 8
 9e6:	82 60       	ori	r24, 0x02	; 2
 9e8:	88 b9       	out	0x08, r24	; 8
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRC &= ~(1 << pin);
 9ea:	87 b1       	in	r24, 0x07	; 7
 9ec:	8b 7f       	andi	r24, 0xFB	; 251
 9ee:	87 b9       	out	0x07, r24	; 7
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{

	if (pull_mode == PORT_PULL_UP) {

		DDRC &= ~(1 << pin);
 9f0:	87 b1       	in	r24, 0x07	; 7
 9f2:	8b 7f       	andi	r24, 0xFB	; 251
 9f4:	87 b9       	out	0x07, r24	; 7

		PORTC |= 1 << pin;
 9f6:	88 b1       	in	r24, 0x08	; 8
 9f8:	84 60       	ori	r24, 0x04	; 4
 9fa:	88 b9       	out	0x08, r24	; 8
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRC &= ~(1 << pin);
 9fc:	87 b1       	in	r24, 0x07	; 7
 9fe:	87 7f       	andi	r24, 0xF7	; 247
 a00:	87 b9       	out	0x07, r24	; 7
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{

	if (pull_mode == PORT_PULL_UP) {

		DDRC &= ~(1 << pin);
 a02:	87 b1       	in	r24, 0x07	; 7
 a04:	87 7f       	andi	r24, 0xF7	; 247
 a06:	87 b9       	out	0x07, r24	; 7

		PORTC |= 1 << pin;
 a08:	88 b1       	in	r24, 0x08	; 8
 a0a:	88 60       	ori	r24, 0x08	; 8
 a0c:	88 b9       	out	0x08, r24	; 8
	
#pragma endregion PORTC_SETTING

#pragma region PORTC_SETTING_INTERUPT

	PCICR |=  1 << PCIE1; // Pin change interrupt 1 is enabled.
 a0e:	e8 e6       	ldi	r30, 0x68	; 104
 a10:	f0 e0       	ldi	r31, 0x00	; 0
 a12:	80 81       	ld	r24, Z
 a14:	82 60       	ori	r24, 0x02	; 2
 a16:	80 83       	st	Z, r24
	PCMSK1 |= 0b1111; // Selects whether pin change interrupt is enabled on the corresponding I/O pin (PCINT8..11 are enabled)
 a18:	ec e6       	ldi	r30, 0x6C	; 108
 a1a:	f0 e0       	ldi	r31, 0x00	; 0
 a1c:	80 81       	ld	r24, Z
 a1e:	8f 60       	ori	r24, 0x0F	; 15
 a20:	80 83       	st	Z, r24
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRD |= 1 << pin;
 a22:	8a b1       	in	r24, 0x0a	; 10
 a24:	84 60       	ori	r24, 0x04	; 4
 a26:	8a b9       	out	0x0a, r24	; 10
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
	} else {
		PORTD &= ~(1 << pin);
 a28:	8b b1       	in	r24, 0x0b	; 11
 a2a:	8b 7f       	andi	r24, 0xFB	; 251
 a2c:	8b b9       	out	0x0b, r24	; 11
 * \return Initialization status.
 */
static inline int8_t sysctrl_init()
{
	/* Set up system clock prescaler according to configuration */
	protected_write_io((void *)&CLKPR, 1 << CLKPCE, (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0));
 a2e:	40 e0       	ldi	r20, 0x00	; 0
 a30:	60 e8       	ldi	r22, 0x80	; 128
 a32:	81 e6       	ldi	r24, 0x61	; 97
 a34:	90 e0       	ldi	r25, 0x00	; 0
 a36:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <protected_write_io>

	SMCR = (0 << SM2) | (0 << SM1) | (0 << SM0) | // Idle
 a3a:	13 be       	out	0x33, r1	; 51
	       (0 << SE);

	MCUCR = (0 << PUD);
 a3c:	15 be       	out	0x35, r1	; 53
 a3e:	08 95       	ret

Disassembly of section .text.protected_write_io:

000013f8 <protected_write_io>:
#if defined(__GNUC__)
	/*
	 * We need to disable interrupts globally before the protected
	 * sequence. In order to do that we must save SREG first.
	 */
	in      r18,    _SFR_IO_ADDR(SREG)
    13f8:	2f b7       	in	r18, 0x3f	; 63
	cli
    13fa:	f8 94       	cli
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
    13fc:	fc 01       	movw	r30, r24
	st      Z, r22                  // Write protection bit to I/O register
    13fe:	60 83       	st	Z, r22
	st      Z, r20                  // Write value to I/O register
    1400:	40 83       	st	Z, r20
	out     _SFR_IO_ADDR(SREG), r18
    1402:	2f bf       	out	0x3f, r18	; 63

	ret                             // Return to caller
    1404:	08 95       	ret

Disassembly of section .text.__vector_4:

00000a40 <__vector_4>:
volatile bool SW_2_TO_PROCESS = false;
volatile bool SW_3_TO_PROCESS = false;
volatile bool SW_4_TO_PROCESS = false;

ISR(PCINT1_vect)
{
 a40:	1f 92       	push	r1
 a42:	0f 92       	push	r0
 a44:	0f b6       	in	r0, 0x3f	; 63
 a46:	0f 92       	push	r0
 a48:	11 24       	eor	r1, r1
 a4a:	2f 93       	push	r18
 a4c:	3f 93       	push	r19
 a4e:	4f 93       	push	r20
 a50:	8f 93       	push	r24
 a52:	9f 93       	push	r25
 *
 * \param[in] pin       The pin number for device
 */
static inline bool PORTC_get_pin_level(const uint8_t pin)
{
	return PINC & (1 << pin);
 a54:	86 b1       	in	r24, 0x06	; 6
 a56:	81 70       	andi	r24, 0x01	; 1
 a58:	96 b1       	in	r25, 0x06	; 6
 a5a:	96 95       	lsr	r25
 a5c:	91 70       	andi	r25, 0x01	; 1
 a5e:	26 b1       	in	r18, 0x06	; 6
 a60:	22 fb       	bst	r18, 2
 a62:	22 27       	eor	r18, r18
 a64:	20 f9       	bld	r18, 0
 a66:	36 b1       	in	r19, 0x06	; 6
 a68:	33 fb       	bst	r19, 3
 a6a:	33 27       	eor	r19, r19
 a6c:	30 f9       	bld	r19, 0
	SwitchState SW_1_STATE_loc = SW_1_get_level() ? RELEASED : PRESSED;
	SwitchState SW_2_STATE_loc = SW_2_get_level() ? RELEASED : PRESSED;
	SwitchState SW_3_STATE_loc = SW_3_get_level() ? RELEASED : PRESSED;
	SwitchState SW_4_STATE_loc = SW_4_get_level() ? RELEASED : PRESSED;
	
	if(SW_1_STATE_loc != SW_1_STATE) // SW_1 changed state
 a6e:	40 91 1a 01 	lds	r20, 0x011A	; 0x80011a <SW_1_STATE>
 a72:	84 17       	cp	r24, r20
 a74:	61 f0       	breq	.+24     	; 0xa8e <__vector_4+0x4e>
	{
		if(SW_1_STATE_loc == PRESSED) // SW_1 is pressed
 a76:	81 11       	cpse	r24, r1
 a78:	06 c0       	rjmp	.+12     	; 0xa86 <__vector_4+0x46>
		{
			SW_1_STATE = PRESSED;
 a7a:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <SW_1_STATE>
			SW_1_TO_PROCESS = true;
 a7e:	81 e0       	ldi	r24, 0x01	; 1
 a80:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <SW_1_TO_PROCESS>
 a84:	33 c0       	rjmp	.+102    	; 0xaec <__vector_4+0xac>
		}
		else // SW_1 is released
		{
			SW_1_STATE = RELEASED;
 a86:	81 e0       	ldi	r24, 0x01	; 1
 a88:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <SW_1_STATE>
 a8c:	2f c0       	rjmp	.+94     	; 0xaec <__vector_4+0xac>
		}
	}
	else if(SW_2_STATE_loc != SW_2_STATE) // SW_2 changed state
 a8e:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <SW_2_STATE>
 a92:	98 17       	cp	r25, r24
 a94:	61 f0       	breq	.+24     	; 0xaae <__vector_4+0x6e>
	{
		if(SW_2_STATE_loc == PRESSED) // SW_2 is pressed
 a96:	91 11       	cpse	r25, r1
 a98:	06 c0       	rjmp	.+12     	; 0xaa6 <__vector_4+0x66>
		{
			SW_2_STATE = PRESSED;
 a9a:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <SW_2_STATE>
			SW_2_TO_PROCESS = true;
 a9e:	81 e0       	ldi	r24, 0x01	; 1
 aa0:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <SW_2_TO_PROCESS>
 aa4:	23 c0       	rjmp	.+70     	; 0xaec <__vector_4+0xac>
		}
		else // SW_2 is released
		{
			SW_2_STATE = RELEASED;
 aa6:	81 e0       	ldi	r24, 0x01	; 1
 aa8:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <SW_2_STATE>
 aac:	1f c0       	rjmp	.+62     	; 0xaec <__vector_4+0xac>
		}
	}
	else if(SW_3_STATE_loc != SW_3_STATE) // SW_3 changed state
 aae:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <SW_3_STATE>
 ab2:	28 17       	cp	r18, r24
 ab4:	61 f0       	breq	.+24     	; 0xace <__vector_4+0x8e>
	{
		if(SW_3_STATE_loc == PRESSED) // SW_3 is pressed
 ab6:	21 11       	cpse	r18, r1
 ab8:	06 c0       	rjmp	.+12     	; 0xac6 <__vector_4+0x86>
		{
			SW_3_STATE = PRESSED;
 aba:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <SW_3_STATE>
			SW_3_TO_PROCESS = true;
 abe:	81 e0       	ldi	r24, 0x01	; 1
 ac0:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <SW_3_TO_PROCESS>
 ac4:	13 c0       	rjmp	.+38     	; 0xaec <__vector_4+0xac>
		}
		else // SW_3 is released
		{
			SW_3_STATE = RELEASED;
 ac6:	81 e0       	ldi	r24, 0x01	; 1
 ac8:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <SW_3_STATE>
 acc:	0f c0       	rjmp	.+30     	; 0xaec <__vector_4+0xac>
		}
	}
	else if(SW_4_STATE_loc != SW_4_STATE) // SW_4 changed state
 ace:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <SW_4_STATE>
 ad2:	38 17       	cp	r19, r24
 ad4:	59 f0       	breq	.+22     	; 0xaec <__vector_4+0xac>
	{
		if(SW_4_STATE_loc == PRESSED) // SW_4 is pressed
 ad6:	31 11       	cpse	r19, r1
 ad8:	06 c0       	rjmp	.+12     	; 0xae6 <__vector_4+0xa6>
		{
			SW_4_STATE = PRESSED;
 ada:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <SW_4_STATE>
			SW_4_TO_PROCESS = true;
 ade:	81 e0       	ldi	r24, 0x01	; 1
 ae0:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <SW_4_TO_PROCESS>
 ae4:	03 c0       	rjmp	.+6      	; 0xaec <__vector_4+0xac>
		}
		else // SW_4 is released
		{
			SW_4_STATE = RELEASED;
 ae6:	81 e0       	ldi	r24, 0x01	; 1
 ae8:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <SW_4_STATE>
		}
	}
 aec:	9f 91       	pop	r25
 aee:	8f 91       	pop	r24
 af0:	4f 91       	pop	r20
 af2:	3f 91       	pop	r19
 af4:	2f 91       	pop	r18
 af6:	0f 90       	pop	r0
 af8:	0f be       	out	0x3f, r0	; 63
 afa:	0f 90       	pop	r0
 afc:	1f 90       	pop	r1
 afe:	18 95       	reti

Disassembly of section .text.__vector_14:

00001006 <__vector_14>:
	TCNT2 = 0;
	TIMSK2 |= _BV(OCIE2A);
}

void timer2_stop() {
	TCCR2B = 0;
    1006:	1f 92       	push	r1
    1008:	0f 92       	push	r0
    100a:	0f b6       	in	r0, 0x3f	; 63
    100c:	0f 92       	push	r0
    100e:	11 24       	eor	r1, r1
    1010:	2f 93       	push	r18
    1012:	3f 93       	push	r19
    1014:	4f 93       	push	r20
    1016:	5f 93       	push	r21
    1018:	6f 93       	push	r22
    101a:	7f 93       	push	r23
    101c:	8f 93       	push	r24
    101e:	9f 93       	push	r25
    1020:	af 93       	push	r26
    1022:	bf 93       	push	r27
    1024:	ef 93       	push	r30
    1026:	ff 93       	push	r31
    1028:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <_edata>
    102c:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <_edata+0x1>
    1030:	09 95       	icall
    1032:	ff 91       	pop	r31
    1034:	ef 91       	pop	r30
    1036:	bf 91       	pop	r27
    1038:	af 91       	pop	r26
    103a:	9f 91       	pop	r25
    103c:	8f 91       	pop	r24
    103e:	7f 91       	pop	r23
    1040:	6f 91       	pop	r22
    1042:	5f 91       	pop	r21
    1044:	4f 91       	pop	r20
    1046:	3f 91       	pop	r19
    1048:	2f 91       	pop	r18
    104a:	0f 90       	pop	r0
    104c:	0f be       	out	0x3f, r0	; 63
    104e:	0f 90       	pop	r0
    1050:	1f 90       	pop	r1
    1052:	18 95       	reti

Disassembly of section .text.__vector_11:

00001054 <__vector_11>:
    1054:	1f 92       	push	r1
    1056:	0f 92       	push	r0
    1058:	0f b6       	in	r0, 0x3f	; 63
    105a:	0f 92       	push	r0
    105c:	11 24       	eor	r1, r1
    105e:	2f 93       	push	r18
    1060:	3f 93       	push	r19
    1062:	4f 93       	push	r20
    1064:	5f 93       	push	r21
    1066:	6f 93       	push	r22
    1068:	7f 93       	push	r23
    106a:	8f 93       	push	r24
    106c:	9f 93       	push	r25
    106e:	af 93       	push	r26
    1070:	bf 93       	push	r27
    1072:	ef 93       	push	r30
    1074:	ff 93       	push	r31
    1076:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <_t1_func>
    107a:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <_t1_func+0x1>
    107e:	09 95       	icall
    1080:	ff 91       	pop	r31
    1082:	ef 91       	pop	r30
    1084:	bf 91       	pop	r27
    1086:	af 91       	pop	r26
    1088:	9f 91       	pop	r25
    108a:	8f 91       	pop	r24
    108c:	7f 91       	pop	r23
    108e:	6f 91       	pop	r22
    1090:	5f 91       	pop	r21
    1092:	4f 91       	pop	r20
    1094:	3f 91       	pop	r19
    1096:	2f 91       	pop	r18
    1098:	0f 90       	pop	r0
    109a:	0f be       	out	0x3f, r0	; 63
    109c:	0f 90       	pop	r0
    109e:	1f 90       	pop	r1
    10a0:	18 95       	reti

Disassembly of section .text.__vector_7:

000010a2 <__vector_7>:
}

#ifdef ENABLE_TIMER2
ISR(TIMER2_COMPA_vect) {
    10a2:	1f 92       	push	r1
    10a4:	0f 92       	push	r0
    10a6:	0f b6       	in	r0, 0x3f	; 63
    10a8:	0f 92       	push	r0
    10aa:	11 24       	eor	r1, r1
    10ac:	2f 93       	push	r18
    10ae:	3f 93       	push	r19
    10b0:	4f 93       	push	r20
    10b2:	5f 93       	push	r21
    10b4:	6f 93       	push	r22
    10b6:	7f 93       	push	r23
    10b8:	8f 93       	push	r24
    10ba:	9f 93       	push	r25
    10bc:	af 93       	push	r26
    10be:	bf 93       	push	r27
    10c0:	ef 93       	push	r30
    10c2:	ff 93       	push	r31
	_t2_func();
    10c4:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <_t2_func>
    10c8:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <_t2_func+0x1>
    10cc:	09 95       	icall
}
    10ce:	ff 91       	pop	r31
    10d0:	ef 91       	pop	r30
    10d2:	bf 91       	pop	r27
    10d4:	af 91       	pop	r26
    10d6:	9f 91       	pop	r25
    10d8:	8f 91       	pop	r24
    10da:	7f 91       	pop	r23
    10dc:	6f 91       	pop	r22
    10de:	5f 91       	pop	r21
    10e0:	4f 91       	pop	r20
    10e2:	3f 91       	pop	r19
    10e4:	2f 91       	pop	r18
    10e6:	0f 90       	pop	r0
    10e8:	0f be       	out	0x3f, r0	; 63
    10ea:	0f 90       	pop	r0
    10ec:	1f 90       	pop	r1
    10ee:	18 95       	reti

Disassembly of section .text.MyPow:

00001332 <MyPow>:

#include <stdio.h>


uint32_t MyPow(uint8_t base, uint8_t exponent)
{
    1332:	f8 2f       	mov	r31, r24
    1334:	e6 2f       	mov	r30, r22
	uint32_t result = 1;
    1336:	61 e0       	ldi	r22, 0x01	; 1
    1338:	70 e0       	ldi	r23, 0x00	; 0
    133a:	80 e0       	ldi	r24, 0x00	; 0
    133c:	90 e0       	ldi	r25, 0x00	; 0
	for (exponent; exponent>0; exponent--)
    133e:	07 c0       	rjmp	.+14     	; 0x134e <MyPow+0x1c>
	{
		result *= base;
    1340:	af 2f       	mov	r26, r31
    1342:	b0 e0       	ldi	r27, 0x00	; 0
    1344:	9b 01       	movw	r18, r22
    1346:	ac 01       	movw	r20, r24
    1348:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__muluhisi3>


uint32_t MyPow(uint8_t base, uint8_t exponent)
{
	uint32_t result = 1;
	for (exponent; exponent>0; exponent--)
    134c:	e1 50       	subi	r30, 0x01	; 1
    134e:	e1 11       	cpse	r30, r1
    1350:	f7 cf       	rjmp	.-18     	; 0x1340 <MyPow+0xe>
	{
		result *= base;
	}
	return result;
    1352:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00001354 <__mulsi3>:
    1354:	db 01       	movw	r26, r22
    1356:	8f 93       	push	r24
    1358:	9f 93       	push	r25
    135a:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__muluhisi3>
    135e:	bf 91       	pop	r27
    1360:	af 91       	pop	r26
    1362:	a2 9f       	mul	r26, r18
    1364:	80 0d       	add	r24, r0
    1366:	91 1d       	adc	r25, r1
    1368:	a3 9f       	mul	r26, r19
    136a:	90 0d       	add	r25, r0
    136c:	b2 9f       	mul	r27, r18
    136e:	90 0d       	add	r25, r0
    1370:	11 24       	eor	r1, r1
    1372:	08 95       	ret

Disassembly of section .text.libgcc.div:

00001182 <__udivmodsi4>:
    1182:	a1 e2       	ldi	r26, 0x21	; 33
    1184:	1a 2e       	mov	r1, r26
    1186:	aa 1b       	sub	r26, r26
    1188:	bb 1b       	sub	r27, r27
    118a:	fd 01       	movw	r30, r26
    118c:	0d c0       	rjmp	.+26     	; 0x11a8 <__udivmodsi4_ep>

0000118e <__udivmodsi4_loop>:
    118e:	aa 1f       	adc	r26, r26
    1190:	bb 1f       	adc	r27, r27
    1192:	ee 1f       	adc	r30, r30
    1194:	ff 1f       	adc	r31, r31
    1196:	a2 17       	cp	r26, r18
    1198:	b3 07       	cpc	r27, r19
    119a:	e4 07       	cpc	r30, r20
    119c:	f5 07       	cpc	r31, r21
    119e:	20 f0       	brcs	.+8      	; 0x11a8 <__udivmodsi4_ep>
    11a0:	a2 1b       	sub	r26, r18
    11a2:	b3 0b       	sbc	r27, r19
    11a4:	e4 0b       	sbc	r30, r20
    11a6:	f5 0b       	sbc	r31, r21

000011a8 <__udivmodsi4_ep>:
    11a8:	66 1f       	adc	r22, r22
    11aa:	77 1f       	adc	r23, r23
    11ac:	88 1f       	adc	r24, r24
    11ae:	99 1f       	adc	r25, r25
    11b0:	1a 94       	dec	r1
    11b2:	69 f7       	brne	.-38     	; 0x118e <__udivmodsi4_loop>
    11b4:	60 95       	com	r22
    11b6:	70 95       	com	r23
    11b8:	80 95       	com	r24
    11ba:	90 95       	com	r25
    11bc:	9b 01       	movw	r18, r22
    11be:	ac 01       	movw	r20, r24
    11c0:	bd 01       	movw	r22, r26
    11c2:	cf 01       	movw	r24, r30
    11c4:	08 95       	ret

Disassembly of section .text.libgcc:

00001406 <__tablejump2__>:
    1406:	ee 0f       	add	r30, r30
    1408:	ff 1f       	adc	r31, r31
    140a:	05 90       	lpm	r0, Z+
    140c:	f4 91       	lpm	r31, Z
    140e:	e0 2d       	mov	r30, r0
    1410:	09 94       	ijmp

Disassembly of section .text.libgcc.mul:

000013e2 <__muluhisi3>:
    13e2:	0e 94 ba 09 	call	0x1374	; 0x1374 <__umulhisi3>
    13e6:	a5 9f       	mul	r26, r21
    13e8:	90 0d       	add	r25, r0
    13ea:	b4 9f       	mul	r27, r20
    13ec:	90 0d       	add	r25, r0
    13ee:	a4 9f       	mul	r26, r20
    13f0:	80 0d       	add	r24, r0
    13f2:	91 1d       	adc	r25, r1
    13f4:	11 24       	eor	r1, r1
    13f6:	08 95       	ret

Disassembly of section .text.libgcc:

000013c8 <__movmemx_qi>:
    13c8:	99 27       	eor	r25, r25

000013ca <__movmemx_hi>:
    13ca:	77 fd       	sbrc	r23, 7
    13cc:	05 c0       	rjmp	.+10     	; 0x13d8 <__movmemx_hi+0xe>
    13ce:	05 90       	lpm	r0, Z+
    13d0:	0d 92       	st	X+, r0
    13d2:	01 97       	sbiw	r24, 0x01	; 1
    13d4:	e1 f7       	brne	.-8      	; 0x13ce <__movmemx_hi+0x4>
    13d6:	08 95       	ret
    13d8:	01 90       	ld	r0, Z+
    13da:	0d 92       	st	X+, r0
    13dc:	01 97       	sbiw	r24, 0x01	; 1
    13de:	e1 f7       	brne	.-8      	; 0x13d8 <__movmemx_hi+0xe>
    13e0:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00001374 <__umulhisi3>:
    1374:	a2 9f       	mul	r26, r18
    1376:	b0 01       	movw	r22, r0
    1378:	b3 9f       	mul	r27, r19
    137a:	c0 01       	movw	r24, r0
    137c:	a3 9f       	mul	r26, r19
    137e:	70 0d       	add	r23, r0
    1380:	81 1d       	adc	r24, r1
    1382:	11 24       	eor	r1, r1
    1384:	91 1d       	adc	r25, r1
    1386:	b2 9f       	mul	r27, r18
    1388:	70 0d       	add	r23, r0
    138a:	81 1d       	adc	r24, r1
    138c:	11 24       	eor	r1, r1
    138e:	91 1d       	adc	r25, r1
    1390:	08 95       	ret

Disassembly of section .text.avrlibc:

0000113c <sprintf>:
    113c:	af e0       	ldi	r26, 0x0F	; 15
    113e:	b0 e0       	ldi	r27, 0x00	; 0
    1140:	e4 ea       	ldi	r30, 0xA4	; 164
    1142:	f8 e0       	ldi	r31, 0x08	; 8
    1144:	0c 94 f1 08 	jmp	0x11e2	; 0x11e2 <__prologue_saves__+0x1c>
    1148:	0e 89       	ldd	r16, Y+22	; 0x16
    114a:	1f 89       	ldd	r17, Y+23	; 0x17
    114c:	86 e0       	ldi	r24, 0x06	; 6
    114e:	8d 83       	std	Y+5, r24	; 0x05
    1150:	1a 83       	std	Y+2, r17	; 0x02
    1152:	09 83       	std	Y+1, r16	; 0x01
    1154:	8f ef       	ldi	r24, 0xFF	; 255
    1156:	9f e7       	ldi	r25, 0x7F	; 127
    1158:	9f 83       	std	Y+7, r25	; 0x07
    115a:	8e 83       	std	Y+6, r24	; 0x06
    115c:	9e 01       	movw	r18, r28
    115e:	25 5e       	subi	r18, 0xE5	; 229
    1160:	3f 4f       	sbci	r19, 0xFF	; 255
    1162:	48 8d       	ldd	r20, Y+24	; 0x18
    1164:	59 8d       	ldd	r21, Y+25	; 0x19
    1166:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1168:	ce 01       	movw	r24, r28
    116a:	01 96       	adiw	r24, 0x01	; 1
    116c:	0e 94 c2 00 	call	0x184	; 0x184 <vfprintf>
    1170:	e8 85       	ldd	r30, Y+8	; 0x08
    1172:	f9 85       	ldd	r31, Y+9	; 0x09
    1174:	e0 0f       	add	r30, r16
    1176:	f1 1f       	adc	r31, r17
    1178:	10 82       	st	Z, r1
    117a:	2f 96       	adiw	r28, 0x0f	; 15
    117c:	e4 e0       	ldi	r30, 0x04	; 4
    117e:	0c 94 28 09 	jmp	0x1250	; 0x1250 <__epilogue_restores__+0x1c>

Disassembly of section .text.avrlibc:

00000184 <vfprintf>:
 184:	2f 92       	push	r2
 186:	3f 92       	push	r3
 188:	4f 92       	push	r4
 18a:	6f 92       	push	r6
 18c:	7f 92       	push	r7
 18e:	8f 92       	push	r8
 190:	9f 92       	push	r9
 192:	af 92       	push	r10
 194:	bf 92       	push	r11
 196:	cf 92       	push	r12
 198:	df 92       	push	r13
 19a:	ef 92       	push	r14
 19c:	ff 92       	push	r15
 19e:	0f 93       	push	r16
 1a0:	1f 93       	push	r17
 1a2:	cf 93       	push	r28
 1a4:	df 93       	push	r29
 1a6:	cd b7       	in	r28, 0x3d	; 61
 1a8:	de b7       	in	r29, 0x3e	; 62
 1aa:	62 97       	sbiw	r28, 0x12	; 18
 1ac:	0f b6       	in	r0, 0x3f	; 63
 1ae:	f8 94       	cli
 1b0:	de bf       	out	0x3e, r29	; 62
 1b2:	0f be       	out	0x3f, r0	; 63
 1b4:	cd bf       	out	0x3d, r28	; 61
 1b6:	6c 01       	movw	r12, r24
 1b8:	3a 01       	movw	r6, r20
 1ba:	86 2e       	mov	r8, r22
 1bc:	79 01       	movw	r14, r18
 1be:	fc 01       	movw	r30, r24
 1c0:	10 86       	std	Z+8, r1	; 0x08
 1c2:	17 82       	std	Z+7, r1	; 0x07
 1c4:	84 81       	ldd	r24, Z+4	; 0x04
 1c6:	81 ff       	sbrs	r24, 1
 1c8:	e7 c1       	rjmp	.+974    	; 0x598 <__EEPROM_REGION_LENGTH__+0x198>
 1ca:	9e 01       	movw	r18, r28
 1cc:	2f 5f       	subi	r18, 0xFF	; 255
 1ce:	3f 4f       	sbci	r19, 0xFF	; 255
 1d0:	3d 87       	std	Y+13, r19	; 0x0d
 1d2:	2c 87       	std	Y+12, r18	; 0x0c
 1d4:	c9 01       	movw	r24, r18
 1d6:	a0 e8       	ldi	r26, 0x80	; 128
 1d8:	88 8b       	std	Y+16, r24	; 0x10
 1da:	99 8b       	std	Y+17, r25	; 0x11
 1dc:	aa 8b       	std	Y+18, r26	; 0x12
 1de:	9f e3       	ldi	r25, 0x3F	; 63
 1e0:	99 2e       	mov	r9, r25
 1e2:	f3 01       	movw	r30, r6
 1e4:	84 91       	lpm	r24, Z
 1e6:	87 fc       	sbrc	r8, 7
 1e8:	80 81       	ld	r24, Z
 1ea:	88 23       	and	r24, r24
 1ec:	09 f4       	brne	.+2      	; 0x1f0 <vfprintf+0x6c>
 1ee:	d0 c1       	rjmp	.+928    	; 0x590 <__EEPROM_REGION_LENGTH__+0x190>
 1f0:	48 2d       	mov	r20, r8
 1f2:	93 01       	movw	r18, r6
 1f4:	2f 5f       	subi	r18, 0xFF	; 255
 1f6:	3f 4f       	sbci	r19, 0xFF	; 255
 1f8:	4f 4f       	sbci	r20, 0xFF	; 255
 1fa:	85 32       	cpi	r24, 0x25	; 37
 1fc:	19 f0       	breq	.+6      	; 0x204 <vfprintf+0x80>
 1fe:	39 01       	movw	r6, r18
 200:	84 2e       	mov	r8, r20
 202:	0a c0       	rjmp	.+20     	; 0x218 <vfprintf+0x94>
 204:	f9 01       	movw	r30, r18
 206:	84 91       	lpm	r24, Z
 208:	47 fd       	sbrc	r20, 7
 20a:	80 81       	ld	r24, Z
 20c:	92 e0       	ldi	r25, 0x02	; 2
 20e:	69 0e       	add	r6, r25
 210:	71 1c       	adc	r7, r1
 212:	81 1c       	adc	r8, r1
 214:	85 32       	cpi	r24, 0x25	; 37
 216:	29 f4       	brne	.+10     	; 0x222 <vfprintf+0x9e>
 218:	b6 01       	movw	r22, r12
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	0e 94 41 07 	call	0xe82	; 0xe82 <fputc>
 220:	e0 cf       	rjmp	.-64     	; 0x1e2 <vfprintf+0x5e>
 222:	b1 2c       	mov	r11, r1
 224:	00 e0       	ldi	r16, 0x00	; 0
 226:	10 e0       	ldi	r17, 0x00	; 0
 228:	10 32       	cpi	r17, 0x20	; 32
 22a:	a0 f4       	brcc	.+40     	; 0x254 <vfprintf+0xd0>
 22c:	8b 32       	cpi	r24, 0x2B	; 43
 22e:	69 f0       	breq	.+26     	; 0x24a <vfprintf+0xc6>
 230:	30 f4       	brcc	.+12     	; 0x23e <vfprintf+0xba>
 232:	80 32       	cpi	r24, 0x20	; 32
 234:	59 f0       	breq	.+22     	; 0x24c <vfprintf+0xc8>
 236:	83 32       	cpi	r24, 0x23	; 35
 238:	69 f4       	brne	.+26     	; 0x254 <vfprintf+0xd0>
 23a:	10 61       	ori	r17, 0x10	; 16
 23c:	2c c0       	rjmp	.+88     	; 0x296 <vfprintf+0x112>
 23e:	8d 32       	cpi	r24, 0x2D	; 45
 240:	39 f0       	breq	.+14     	; 0x250 <vfprintf+0xcc>
 242:	80 33       	cpi	r24, 0x30	; 48
 244:	39 f4       	brne	.+14     	; 0x254 <vfprintf+0xd0>
 246:	11 60       	ori	r17, 0x01	; 1
 248:	26 c0       	rjmp	.+76     	; 0x296 <vfprintf+0x112>
 24a:	12 60       	ori	r17, 0x02	; 2
 24c:	14 60       	ori	r17, 0x04	; 4
 24e:	23 c0       	rjmp	.+70     	; 0x296 <vfprintf+0x112>
 250:	18 60       	ori	r17, 0x08	; 8
 252:	21 c0       	rjmp	.+66     	; 0x296 <vfprintf+0x112>
 254:	17 fd       	sbrc	r17, 7
 256:	29 c0       	rjmp	.+82     	; 0x2aa <vfprintf+0x126>
 258:	90 ed       	ldi	r25, 0xD0	; 208
 25a:	98 0f       	add	r25, r24
 25c:	9a 30       	cpi	r25, 0x0A	; 10
 25e:	78 f4       	brcc	.+30     	; 0x27e <vfprintf+0xfa>
 260:	16 ff       	sbrs	r17, 6
 262:	06 c0       	rjmp	.+12     	; 0x270 <vfprintf+0xec>
 264:	aa e0       	ldi	r26, 0x0A	; 10
 266:	ba 9e       	mul	r11, r26
 268:	90 0d       	add	r25, r0
 26a:	11 24       	eor	r1, r1
 26c:	b9 2e       	mov	r11, r25
 26e:	13 c0       	rjmp	.+38     	; 0x296 <vfprintf+0x112>
 270:	ea e0       	ldi	r30, 0x0A	; 10
 272:	0e 9f       	mul	r16, r30
 274:	90 0d       	add	r25, r0
 276:	11 24       	eor	r1, r1
 278:	09 2f       	mov	r16, r25
 27a:	10 62       	ori	r17, 0x20	; 32
 27c:	0c c0       	rjmp	.+24     	; 0x296 <vfprintf+0x112>
 27e:	8e 32       	cpi	r24, 0x2E	; 46
 280:	21 f4       	brne	.+8      	; 0x28a <vfprintf+0x106>
 282:	16 fd       	sbrc	r17, 6
 284:	85 c1       	rjmp	.+778    	; 0x590 <__EEPROM_REGION_LENGTH__+0x190>
 286:	10 64       	ori	r17, 0x40	; 64
 288:	06 c0       	rjmp	.+12     	; 0x296 <vfprintf+0x112>
 28a:	8c 36       	cpi	r24, 0x6C	; 108
 28c:	11 f4       	brne	.+4      	; 0x292 <vfprintf+0x10e>
 28e:	10 68       	ori	r17, 0x80	; 128
 290:	02 c0       	rjmp	.+4      	; 0x296 <vfprintf+0x112>
 292:	88 36       	cpi	r24, 0x68	; 104
 294:	51 f4       	brne	.+20     	; 0x2aa <vfprintf+0x126>
 296:	f3 01       	movw	r30, r6
 298:	84 91       	lpm	r24, Z
 29a:	87 fc       	sbrc	r8, 7
 29c:	80 81       	ld	r24, Z
 29e:	ff ef       	ldi	r31, 0xFF	; 255
 2a0:	6f 1a       	sub	r6, r31
 2a2:	7f 0a       	sbc	r7, r31
 2a4:	8f 0a       	sbc	r8, r31
 2a6:	81 11       	cpse	r24, r1
 2a8:	bf cf       	rjmp	.-130    	; 0x228 <vfprintf+0xa4>
 2aa:	98 2f       	mov	r25, r24
 2ac:	9f 7d       	andi	r25, 0xDF	; 223
 2ae:	95 54       	subi	r25, 0x45	; 69
 2b0:	93 30       	cpi	r25, 0x03	; 3
 2b2:	28 f4       	brcc	.+10     	; 0x2be <vfprintf+0x13a>
 2b4:	24 e0       	ldi	r18, 0x04	; 4
 2b6:	e2 0e       	add	r14, r18
 2b8:	f1 1c       	adc	r15, r1
 2ba:	99 82       	std	Y+1, r9	; 0x01
 2bc:	0f c0       	rjmp	.+30     	; 0x2dc <vfprintf+0x158>
 2be:	83 36       	cpi	r24, 0x63	; 99
 2c0:	31 f0       	breq	.+12     	; 0x2ce <vfprintf+0x14a>
 2c2:	83 37       	cpi	r24, 0x73	; 115
 2c4:	91 f0       	breq	.+36     	; 0x2ea <vfprintf+0x166>
 2c6:	83 35       	cpi	r24, 0x53	; 83
 2c8:	09 f0       	breq	.+2      	; 0x2cc <vfprintf+0x148>
 2ca:	63 c0       	rjmp	.+198    	; 0x392 <vfprintf+0x20e>
 2cc:	27 c0       	rjmp	.+78     	; 0x31c <vfprintf+0x198>
 2ce:	f7 01       	movw	r30, r14
 2d0:	80 81       	ld	r24, Z
 2d2:	89 83       	std	Y+1, r24	; 0x01
 2d4:	97 01       	movw	r18, r14
 2d6:	2e 5f       	subi	r18, 0xFE	; 254
 2d8:	3f 4f       	sbci	r19, 0xFF	; 255
 2da:	79 01       	movw	r14, r18
 2dc:	28 88       	ldd	r2, Y+16	; 0x10
 2de:	39 88       	ldd	r3, Y+17	; 0x11
 2e0:	4a 88       	ldd	r4, Y+18	; 0x12
 2e2:	aa 24       	eor	r10, r10
 2e4:	a3 94       	inc	r10
 2e6:	b1 2c       	mov	r11, r1
 2e8:	17 c0       	rjmp	.+46     	; 0x318 <vfprintf+0x194>
 2ea:	a7 01       	movw	r20, r14
 2ec:	4d 5f       	subi	r20, 0xFD	; 253
 2ee:	5f 4f       	sbci	r21, 0xFF	; 255
 2f0:	5f 87       	std	Y+15, r21	; 0x0f
 2f2:	4e 87       	std	Y+14, r20	; 0x0e
 2f4:	f7 01       	movw	r30, r14
 2f6:	20 80       	ld	r2, Z
 2f8:	31 80       	ldd	r3, Z+1	; 0x01
 2fa:	42 80       	ldd	r4, Z+2	; 0x02
 2fc:	16 ff       	sbrs	r17, 6
 2fe:	03 c0       	rjmp	.+6      	; 0x306 <vfprintf+0x182>
 300:	4b 2d       	mov	r20, r11
 302:	50 e0       	ldi	r21, 0x00	; 0
 304:	02 c0       	rjmp	.+4      	; 0x30a <vfprintf+0x186>
 306:	4f ef       	ldi	r20, 0xFF	; 255
 308:	5f ef       	ldi	r21, 0xFF	; 255
 30a:	84 2d       	mov	r24, r4
 30c:	b1 01       	movw	r22, r2
 30e:	0e 94 ff 08 	call	0x11fe	; 0x11fe <strnlen>
 312:	5c 01       	movw	r10, r24
 314:	ee 84       	ldd	r14, Y+14	; 0x0e
 316:	ff 84       	ldd	r15, Y+15	; 0x0f
 318:	1f 77       	andi	r17, 0x7F	; 127
 31a:	18 c0       	rjmp	.+48     	; 0x34c <vfprintf+0x1c8>
 31c:	97 01       	movw	r18, r14
 31e:	2d 5f       	subi	r18, 0xFD	; 253
 320:	3f 4f       	sbci	r19, 0xFF	; 255
 322:	3f 87       	std	Y+15, r19	; 0x0f
 324:	2e 87       	std	Y+14, r18	; 0x0e
 326:	f7 01       	movw	r30, r14
 328:	20 80       	ld	r2, Z
 32a:	31 80       	ldd	r3, Z+1	; 0x01
 32c:	42 80       	ldd	r4, Z+2	; 0x02
 32e:	16 ff       	sbrs	r17, 6
 330:	03 c0       	rjmp	.+6      	; 0x338 <vfprintf+0x1b4>
 332:	4b 2d       	mov	r20, r11
 334:	50 e0       	ldi	r21, 0x00	; 0
 336:	02 c0       	rjmp	.+4      	; 0x33c <vfprintf+0x1b8>
 338:	4f ef       	ldi	r20, 0xFF	; 255
 33a:	5f ef       	ldi	r21, 0xFF	; 255
 33c:	84 2d       	mov	r24, r4
 33e:	b1 01       	movw	r22, r2
 340:	0e 94 ff 08 	call	0x11fe	; 0x11fe <strnlen>
 344:	5c 01       	movw	r10, r24
 346:	10 68       	ori	r17, 0x80	; 128
 348:	ee 84       	ldd	r14, Y+14	; 0x0e
 34a:	ff 84       	ldd	r15, Y+15	; 0x0f
 34c:	13 fd       	sbrc	r17, 3
 34e:	1d c0       	rjmp	.+58     	; 0x38a <vfprintf+0x206>
 350:	80 2f       	mov	r24, r16
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	a8 16       	cp	r10, r24
 356:	b9 06       	cpc	r11, r25
 358:	c0 f4       	brcc	.+48     	; 0x38a <vfprintf+0x206>
 35a:	b6 01       	movw	r22, r12
 35c:	80 e2       	ldi	r24, 0x20	; 32
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	0e 94 41 07 	call	0xe82	; 0xe82 <fputc>
 364:	01 50       	subi	r16, 0x01	; 1
 366:	f4 cf       	rjmp	.-24     	; 0x350 <vfprintf+0x1cc>
 368:	f1 01       	movw	r30, r2
 36a:	84 91       	lpm	r24, Z
 36c:	47 fc       	sbrc	r4, 7
 36e:	80 81       	ld	r24, Z
 370:	ff ef       	ldi	r31, 0xFF	; 255
 372:	2f 1a       	sub	r2, r31
 374:	3f 0a       	sbc	r3, r31
 376:	4f 0a       	sbc	r4, r31
 378:	b6 01       	movw	r22, r12
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	0e 94 41 07 	call	0xe82	; 0xe82 <fputc>
 380:	01 11       	cpse	r16, r1
 382:	01 50       	subi	r16, 0x01	; 1
 384:	21 e0       	ldi	r18, 0x01	; 1
 386:	a2 1a       	sub	r10, r18
 388:	b1 08       	sbc	r11, r1
 38a:	a1 14       	cp	r10, r1
 38c:	b1 04       	cpc	r11, r1
 38e:	61 f7       	brne	.-40     	; 0x368 <vfprintf+0x1e4>
 390:	f5 c0       	rjmp	.+490    	; 0x57c <__EEPROM_REGION_LENGTH__+0x17c>
 392:	84 36       	cpi	r24, 0x64	; 100
 394:	11 f0       	breq	.+4      	; 0x39a <vfprintf+0x216>
 396:	89 36       	cpi	r24, 0x69	; 105
 398:	71 f5       	brne	.+92     	; 0x3f6 <vfprintf+0x272>
 39a:	f7 01       	movw	r30, r14
 39c:	17 ff       	sbrs	r17, 7
 39e:	08 c0       	rjmp	.+16     	; 0x3b0 <vfprintf+0x22c>
 3a0:	60 81       	ld	r22, Z
 3a2:	71 81       	ldd	r23, Z+1	; 0x01
 3a4:	82 81       	ldd	r24, Z+2	; 0x02
 3a6:	93 81       	ldd	r25, Z+3	; 0x03
 3a8:	97 01       	movw	r18, r14
 3aa:	2c 5f       	subi	r18, 0xFC	; 252
 3ac:	3f 4f       	sbci	r19, 0xFF	; 255
 3ae:	09 c0       	rjmp	.+18     	; 0x3c2 <vfprintf+0x23e>
 3b0:	60 81       	ld	r22, Z
 3b2:	71 81       	ldd	r23, Z+1	; 0x01
 3b4:	07 2e       	mov	r0, r23
 3b6:	00 0c       	add	r0, r0
 3b8:	88 0b       	sbc	r24, r24
 3ba:	99 0b       	sbc	r25, r25
 3bc:	97 01       	movw	r18, r14
 3be:	2e 5f       	subi	r18, 0xFE	; 254
 3c0:	3f 4f       	sbci	r19, 0xFF	; 255
 3c2:	79 01       	movw	r14, r18
 3c4:	1f 76       	andi	r17, 0x6F	; 111
 3c6:	31 2e       	mov	r3, r17
 3c8:	97 ff       	sbrs	r25, 7
 3ca:	0a c0       	rjmp	.+20     	; 0x3e0 <vfprintf+0x25c>
 3cc:	90 95       	com	r25
 3ce:	80 95       	com	r24
 3d0:	70 95       	com	r23
 3d2:	61 95       	neg	r22
 3d4:	7f 4f       	sbci	r23, 0xFF	; 255
 3d6:	8f 4f       	sbci	r24, 0xFF	; 255
 3d8:	9f 4f       	sbci	r25, 0xFF	; 255
 3da:	31 2f       	mov	r19, r17
 3dc:	30 68       	ori	r19, 0x80	; 128
 3de:	33 2e       	mov	r3, r19
 3e0:	2a e0       	ldi	r18, 0x0A	; 10
 3e2:	30 e0       	ldi	r19, 0x00	; 0
 3e4:	ae 01       	movw	r20, r28
 3e6:	4f 5f       	subi	r20, 0xFF	; 255
 3e8:	5f 4f       	sbci	r21, 0xFF	; 255
 3ea:	0e 94 80 05 	call	0xb00	; 0xb00 <__ultoa_invert>
 3ee:	48 2e       	mov	r4, r24
 3f0:	4c 85       	ldd	r20, Y+12	; 0x0c
 3f2:	44 1a       	sub	r4, r20
 3f4:	4a c0       	rjmp	.+148    	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 3f6:	85 37       	cpi	r24, 0x75	; 117
 3f8:	29 f4       	brne	.+10     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3fa:	1f 7e       	andi	r17, 0xEF	; 239
 3fc:	a1 2e       	mov	r10, r17
 3fe:	2a e0       	ldi	r18, 0x0A	; 10
 400:	30 e0       	ldi	r19, 0x00	; 0
 402:	25 c0       	rjmp	.+74     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 404:	51 2f       	mov	r21, r17
 406:	59 7f       	andi	r21, 0xF9	; 249
 408:	a5 2e       	mov	r10, r21
 40a:	8f 36       	cpi	r24, 0x6F	; 111
 40c:	c1 f0       	breq	.+48     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 40e:	18 f4       	brcc	.+6      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 410:	88 35       	cpi	r24, 0x58	; 88
 412:	79 f0       	breq	.+30     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 414:	bd c0       	rjmp	.+378    	; 0x590 <__EEPROM_REGION_LENGTH__+0x190>
 416:	80 37       	cpi	r24, 0x70	; 112
 418:	19 f0       	breq	.+6      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 41a:	88 37       	cpi	r24, 0x78	; 120
 41c:	21 f0       	breq	.+8      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 41e:	b8 c0       	rjmp	.+368    	; 0x590 <__EEPROM_REGION_LENGTH__+0x190>
 420:	85 2f       	mov	r24, r21
 422:	80 61       	ori	r24, 0x10	; 16
 424:	a8 2e       	mov	r10, r24
 426:	a4 fe       	sbrs	r10, 4
 428:	0d c0       	rjmp	.+26     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 42a:	9a 2d       	mov	r25, r10
 42c:	94 60       	ori	r25, 0x04	; 4
 42e:	a9 2e       	mov	r10, r25
 430:	09 c0       	rjmp	.+18     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 432:	14 ff       	sbrs	r17, 4
 434:	0a c0       	rjmp	.+20     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 436:	a5 2f       	mov	r26, r21
 438:	a6 60       	ori	r26, 0x06	; 6
 43a:	aa 2e       	mov	r10, r26
 43c:	06 c0       	rjmp	.+12     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 43e:	28 e0       	ldi	r18, 0x08	; 8
 440:	30 e0       	ldi	r19, 0x00	; 0
 442:	05 c0       	rjmp	.+10     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 444:	20 e1       	ldi	r18, 0x10	; 16
 446:	30 e0       	ldi	r19, 0x00	; 0
 448:	02 c0       	rjmp	.+4      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 44a:	20 e1       	ldi	r18, 0x10	; 16
 44c:	32 e0       	ldi	r19, 0x02	; 2
 44e:	f7 01       	movw	r30, r14
 450:	a7 fe       	sbrs	r10, 7
 452:	08 c0       	rjmp	.+16     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 454:	60 81       	ld	r22, Z
 456:	71 81       	ldd	r23, Z+1	; 0x01
 458:	82 81       	ldd	r24, Z+2	; 0x02
 45a:	93 81       	ldd	r25, Z+3	; 0x03
 45c:	a7 01       	movw	r20, r14
 45e:	4c 5f       	subi	r20, 0xFC	; 252
 460:	5f 4f       	sbci	r21, 0xFF	; 255
 462:	07 c0       	rjmp	.+14     	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 464:	60 81       	ld	r22, Z
 466:	71 81       	ldd	r23, Z+1	; 0x01
 468:	80 e0       	ldi	r24, 0x00	; 0
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	a7 01       	movw	r20, r14
 46e:	4e 5f       	subi	r20, 0xFE	; 254
 470:	5f 4f       	sbci	r21, 0xFF	; 255
 472:	7a 01       	movw	r14, r20
 474:	ae 01       	movw	r20, r28
 476:	4f 5f       	subi	r20, 0xFF	; 255
 478:	5f 4f       	sbci	r21, 0xFF	; 255
 47a:	0e 94 80 05 	call	0xb00	; 0xb00 <__ultoa_invert>
 47e:	48 2e       	mov	r4, r24
 480:	5c 85       	ldd	r21, Y+12	; 0x0c
 482:	45 1a       	sub	r4, r21
 484:	8a 2d       	mov	r24, r10
 486:	8f 77       	andi	r24, 0x7F	; 127
 488:	38 2e       	mov	r3, r24
 48a:	36 fe       	sbrs	r3, 6
 48c:	0d c0       	rjmp	.+26     	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
 48e:	93 2d       	mov	r25, r3
 490:	9e 7f       	andi	r25, 0xFE	; 254
 492:	a9 2e       	mov	r10, r25
 494:	4b 14       	cp	r4, r11
 496:	58 f4       	brcc	.+22     	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
 498:	34 fe       	sbrs	r3, 4
 49a:	0b c0       	rjmp	.+22     	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
 49c:	32 fc       	sbrc	r3, 2
 49e:	09 c0       	rjmp	.+18     	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
 4a0:	a3 2d       	mov	r26, r3
 4a2:	ae 7e       	andi	r26, 0xEE	; 238
 4a4:	aa 2e       	mov	r10, r26
 4a6:	05 c0       	rjmp	.+10     	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
 4a8:	14 2d       	mov	r17, r4
 4aa:	a3 2c       	mov	r10, r3
 4ac:	03 c0       	rjmp	.+6      	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
 4ae:	14 2d       	mov	r17, r4
 4b0:	01 c0       	rjmp	.+2      	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
 4b2:	1b 2d       	mov	r17, r11
 4b4:	a4 fe       	sbrs	r10, 4
 4b6:	0e c0       	rjmp	.+28     	; 0x4d4 <__EEPROM_REGION_LENGTH__+0xd4>
 4b8:	fe 01       	movw	r30, r28
 4ba:	e4 0d       	add	r30, r4
 4bc:	f1 1d       	adc	r31, r1
 4be:	80 81       	ld	r24, Z
 4c0:	80 33       	cpi	r24, 0x30	; 48
 4c2:	21 f4       	brne	.+8      	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
 4c4:	ea 2d       	mov	r30, r10
 4c6:	e9 7e       	andi	r30, 0xE9	; 233
 4c8:	ae 2e       	mov	r10, r30
 4ca:	08 c0       	rjmp	.+16     	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
 4cc:	a2 fe       	sbrs	r10, 2
 4ce:	05 c0       	rjmp	.+10     	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
 4d0:	1e 5f       	subi	r17, 0xFE	; 254
 4d2:	04 c0       	rjmp	.+8      	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
 4d4:	8a 2d       	mov	r24, r10
 4d6:	86 78       	andi	r24, 0x86	; 134
 4d8:	09 f0       	breq	.+2      	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
 4da:	1f 5f       	subi	r17, 0xFF	; 255
 4dc:	a3 fc       	sbrc	r10, 3
 4de:	11 c0       	rjmp	.+34     	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
 4e0:	a0 fe       	sbrs	r10, 0
 4e2:	06 c0       	rjmp	.+12     	; 0x4f0 <__EEPROM_REGION_LENGTH__+0xf0>
 4e4:	10 17       	cp	r17, r16
 4e6:	88 f4       	brcc	.+34     	; 0x50a <__EEPROM_REGION_LENGTH__+0x10a>
 4e8:	04 0d       	add	r16, r4
 4ea:	b0 2e       	mov	r11, r16
 4ec:	b1 1a       	sub	r11, r17
 4ee:	0e c0       	rjmp	.+28     	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
 4f0:	10 17       	cp	r17, r16
 4f2:	60 f4       	brcc	.+24     	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
 4f4:	b6 01       	movw	r22, r12
 4f6:	80 e2       	ldi	r24, 0x20	; 32
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	0e 94 41 07 	call	0xe82	; 0xe82 <fputc>
 4fe:	1f 5f       	subi	r17, 0xFF	; 255
 500:	f7 cf       	rjmp	.-18     	; 0x4f0 <__EEPROM_REGION_LENGTH__+0xf0>
 502:	10 17       	cp	r17, r16
 504:	18 f4       	brcc	.+6      	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
 506:	01 1b       	sub	r16, r17
 508:	02 c0       	rjmp	.+4      	; 0x50e <__EEPROM_REGION_LENGTH__+0x10e>
 50a:	b4 2c       	mov	r11, r4
 50c:	00 e0       	ldi	r16, 0x00	; 0
 50e:	a4 fe       	sbrs	r10, 4
 510:	10 c0       	rjmp	.+32     	; 0x532 <__EEPROM_REGION_LENGTH__+0x132>
 512:	b6 01       	movw	r22, r12
 514:	80 e3       	ldi	r24, 0x30	; 48
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	0e 94 41 07 	call	0xe82	; 0xe82 <fputc>
 51c:	a2 fe       	sbrs	r10, 2
 51e:	17 c0       	rjmp	.+46     	; 0x54e <__EEPROM_REGION_LENGTH__+0x14e>
 520:	a1 fc       	sbrc	r10, 1
 522:	03 c0       	rjmp	.+6      	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
 524:	88 e7       	ldi	r24, 0x78	; 120
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	02 c0       	rjmp	.+4      	; 0x52e <__EEPROM_REGION_LENGTH__+0x12e>
 52a:	88 e5       	ldi	r24, 0x58	; 88
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	b6 01       	movw	r22, r12
 530:	0c c0       	rjmp	.+24     	; 0x54a <__EEPROM_REGION_LENGTH__+0x14a>
 532:	8a 2d       	mov	r24, r10
 534:	86 78       	andi	r24, 0x86	; 134
 536:	59 f0       	breq	.+22     	; 0x54e <__EEPROM_REGION_LENGTH__+0x14e>
 538:	a1 fe       	sbrs	r10, 1
 53a:	02 c0       	rjmp	.+4      	; 0x540 <__EEPROM_REGION_LENGTH__+0x140>
 53c:	8b e2       	ldi	r24, 0x2B	; 43
 53e:	01 c0       	rjmp	.+2      	; 0x542 <__EEPROM_REGION_LENGTH__+0x142>
 540:	80 e2       	ldi	r24, 0x20	; 32
 542:	a7 fc       	sbrc	r10, 7
 544:	8d e2       	ldi	r24, 0x2D	; 45
 546:	b6 01       	movw	r22, r12
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	0e 94 41 07 	call	0xe82	; 0xe82 <fputc>
 54e:	4b 14       	cp	r4, r11
 550:	38 f4       	brcc	.+14     	; 0x560 <__EEPROM_REGION_LENGTH__+0x160>
 552:	b6 01       	movw	r22, r12
 554:	80 e3       	ldi	r24, 0x30	; 48
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	0e 94 41 07 	call	0xe82	; 0xe82 <fputc>
 55c:	ba 94       	dec	r11
 55e:	f7 cf       	rjmp	.-18     	; 0x54e <__EEPROM_REGION_LENGTH__+0x14e>
 560:	4a 94       	dec	r4
 562:	e1 e0       	ldi	r30, 0x01	; 1
 564:	f0 e0       	ldi	r31, 0x00	; 0
 566:	ec 0f       	add	r30, r28
 568:	fd 1f       	adc	r31, r29
 56a:	e4 0d       	add	r30, r4
 56c:	f1 1d       	adc	r31, r1
 56e:	80 81       	ld	r24, Z
 570:	b6 01       	movw	r22, r12
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	0e 94 41 07 	call	0xe82	; 0xe82 <fputc>
 578:	41 10       	cpse	r4, r1
 57a:	f2 cf       	rjmp	.-28     	; 0x560 <__EEPROM_REGION_LENGTH__+0x160>
 57c:	00 23       	and	r16, r16
 57e:	09 f4       	brne	.+2      	; 0x582 <__EEPROM_REGION_LENGTH__+0x182>
 580:	30 ce       	rjmp	.-928    	; 0x1e2 <vfprintf+0x5e>
 582:	b6 01       	movw	r22, r12
 584:	80 e2       	ldi	r24, 0x20	; 32
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	0e 94 41 07 	call	0xe82	; 0xe82 <fputc>
 58c:	01 50       	subi	r16, 0x01	; 1
 58e:	f6 cf       	rjmp	.-20     	; 0x57c <__EEPROM_REGION_LENGTH__+0x17c>
 590:	f6 01       	movw	r30, r12
 592:	87 81       	ldd	r24, Z+7	; 0x07
 594:	90 85       	ldd	r25, Z+8	; 0x08
 596:	02 c0       	rjmp	.+4      	; 0x59c <__EEPROM_REGION_LENGTH__+0x19c>
 598:	8f ef       	ldi	r24, 0xFF	; 255
 59a:	9f ef       	ldi	r25, 0xFF	; 255
 59c:	62 96       	adiw	r28, 0x12	; 18
 59e:	0f b6       	in	r0, 0x3f	; 63
 5a0:	f8 94       	cli
 5a2:	de bf       	out	0x3e, r29	; 62
 5a4:	0f be       	out	0x3f, r0	; 63
 5a6:	cd bf       	out	0x3d, r28	; 61
 5a8:	df 91       	pop	r29
 5aa:	cf 91       	pop	r28
 5ac:	1f 91       	pop	r17
 5ae:	0f 91       	pop	r16
 5b0:	ff 90       	pop	r15
 5b2:	ef 90       	pop	r14
 5b4:	df 90       	pop	r13
 5b6:	cf 90       	pop	r12
 5b8:	bf 90       	pop	r11
 5ba:	af 90       	pop	r10
 5bc:	9f 90       	pop	r9
 5be:	8f 90       	pop	r8
 5c0:	7f 90       	pop	r7
 5c2:	6f 90       	pop	r6
 5c4:	4f 90       	pop	r4
 5c6:	3f 90       	pop	r3
 5c8:	2f 90       	pop	r2
 5ca:	08 95       	ret

Disassembly of section .text.avrlibc:

000011fe <strnlen>:
    11fe:	cf 92       	push	r12
    1200:	df 92       	push	r13
    1202:	ef 92       	push	r14
    1204:	6b 01       	movw	r12, r22
    1206:	e8 2e       	mov	r14, r24
    1208:	a8 2f       	mov	r26, r24
    120a:	cb 01       	movw	r24, r22
    120c:	41 15       	cp	r20, r1
    120e:	51 05       	cpc	r21, r1
    1210:	31 f4       	brne	.+12     	; 0x121e <strnlen+0x20>
    1212:	8c 19       	sub	r24, r12
    1214:	9d 09       	sbc	r25, r13
    1216:	ef 90       	pop	r14
    1218:	df 90       	pop	r13
    121a:	cf 90       	pop	r12
    121c:	08 95       	ret
    121e:	fc 01       	movw	r30, r24
    1220:	24 91       	lpm	r18, Z
    1222:	a7 fd       	sbrc	r26, 7
    1224:	20 81       	ld	r18, Z
    1226:	22 23       	and	r18, r18
    1228:	a1 f3       	breq	.-24     	; 0x1212 <strnlen+0x14>
    122a:	01 96       	adiw	r24, 0x01	; 1
    122c:	a1 1d       	adc	r26, r1
    122e:	41 50       	subi	r20, 0x01	; 1
    1230:	51 09       	sbc	r21, r1
    1232:	ec cf       	rjmp	.-40     	; 0x120c <strnlen+0xe>

Disassembly of section .text.avrlibc:

00000e82 <fputc>:
 e82:	0f 93       	push	r16
 e84:	1f 93       	push	r17
 e86:	cf 93       	push	r28
 e88:	df 93       	push	r29
 e8a:	fb 01       	movw	r30, r22
 e8c:	24 81       	ldd	r18, Z+4	; 0x04
 e8e:	21 fd       	sbrc	r18, 1
 e90:	03 c0       	rjmp	.+6      	; 0xe98 <fputc+0x16>
 e92:	8f ef       	ldi	r24, 0xFF	; 255
 e94:	9f ef       	ldi	r25, 0xFF	; 255
 e96:	2c c0       	rjmp	.+88     	; 0xef0 <fputc+0x6e>
 e98:	22 ff       	sbrs	r18, 2
 e9a:	16 c0       	rjmp	.+44     	; 0xec8 <fputc+0x46>
 e9c:	47 81       	ldd	r20, Z+7	; 0x07
 e9e:	50 85       	ldd	r21, Z+8	; 0x08
 ea0:	25 81       	ldd	r18, Z+5	; 0x05
 ea2:	36 81       	ldd	r19, Z+6	; 0x06
 ea4:	42 17       	cp	r20, r18
 ea6:	53 07       	cpc	r21, r19
 ea8:	44 f4       	brge	.+16     	; 0xeba <fputc+0x38>
 eaa:	a0 81       	ld	r26, Z
 eac:	b1 81       	ldd	r27, Z+1	; 0x01
 eae:	9d 01       	movw	r18, r26
 eb0:	2f 5f       	subi	r18, 0xFF	; 255
 eb2:	3f 4f       	sbci	r19, 0xFF	; 255
 eb4:	31 83       	std	Z+1, r19	; 0x01
 eb6:	20 83       	st	Z, r18
 eb8:	8c 93       	st	X, r24
 eba:	27 81       	ldd	r18, Z+7	; 0x07
 ebc:	30 85       	ldd	r19, Z+8	; 0x08
 ebe:	2f 5f       	subi	r18, 0xFF	; 255
 ec0:	3f 4f       	sbci	r19, 0xFF	; 255
 ec2:	30 87       	std	Z+8, r19	; 0x08
 ec4:	27 83       	std	Z+7, r18	; 0x07
 ec6:	14 c0       	rjmp	.+40     	; 0xef0 <fputc+0x6e>
 ec8:	8b 01       	movw	r16, r22
 eca:	ec 01       	movw	r28, r24
 ecc:	fb 01       	movw	r30, r22
 ece:	01 84       	ldd	r0, Z+9	; 0x09
 ed0:	f2 85       	ldd	r31, Z+10	; 0x0a
 ed2:	e0 2d       	mov	r30, r0
 ed4:	09 95       	icall
 ed6:	89 2b       	or	r24, r25
 ed8:	e1 f6       	brne	.-72     	; 0xe92 <fputc+0x10>
 eda:	d8 01       	movw	r26, r16
 edc:	17 96       	adiw	r26, 0x07	; 7
 ede:	8d 91       	ld	r24, X+
 ee0:	9c 91       	ld	r25, X
 ee2:	18 97       	sbiw	r26, 0x08	; 8
 ee4:	01 96       	adiw	r24, 0x01	; 1
 ee6:	18 96       	adiw	r26, 0x08	; 8
 ee8:	9c 93       	st	X, r25
 eea:	8e 93       	st	-X, r24
 eec:	17 97       	sbiw	r26, 0x07	; 7
 eee:	ce 01       	movw	r24, r28
 ef0:	df 91       	pop	r29
 ef2:	cf 91       	pop	r28
 ef4:	1f 91       	pop	r17
 ef6:	0f 91       	pop	r16
 ef8:	08 95       	ret

Disassembly of section .text.avrlibc:

00000b00 <__ultoa_invert>:
 b00:	fa 01       	movw	r30, r20
 b02:	aa 27       	eor	r26, r26
 b04:	28 30       	cpi	r18, 0x08	; 8
 b06:	51 f1       	breq	.+84     	; 0xb5c <__ultoa_invert+0x5c>
 b08:	20 31       	cpi	r18, 0x10	; 16
 b0a:	81 f1       	breq	.+96     	; 0xb6c <__ultoa_invert+0x6c>
 b0c:	e8 94       	clt
 b0e:	6f 93       	push	r22
 b10:	6e 7f       	andi	r22, 0xFE	; 254
 b12:	6e 5f       	subi	r22, 0xFE	; 254
 b14:	7f 4f       	sbci	r23, 0xFF	; 255
 b16:	8f 4f       	sbci	r24, 0xFF	; 255
 b18:	9f 4f       	sbci	r25, 0xFF	; 255
 b1a:	af 4f       	sbci	r26, 0xFF	; 255
 b1c:	b1 e0       	ldi	r27, 0x01	; 1
 b1e:	3e d0       	rcall	.+124    	; 0xb9c <__ultoa_invert+0x9c>
 b20:	b4 e0       	ldi	r27, 0x04	; 4
 b22:	3c d0       	rcall	.+120    	; 0xb9c <__ultoa_invert+0x9c>
 b24:	67 0f       	add	r22, r23
 b26:	78 1f       	adc	r23, r24
 b28:	89 1f       	adc	r24, r25
 b2a:	9a 1f       	adc	r25, r26
 b2c:	a1 1d       	adc	r26, r1
 b2e:	68 0f       	add	r22, r24
 b30:	79 1f       	adc	r23, r25
 b32:	8a 1f       	adc	r24, r26
 b34:	91 1d       	adc	r25, r1
 b36:	a1 1d       	adc	r26, r1
 b38:	6a 0f       	add	r22, r26
 b3a:	71 1d       	adc	r23, r1
 b3c:	81 1d       	adc	r24, r1
 b3e:	91 1d       	adc	r25, r1
 b40:	a1 1d       	adc	r26, r1
 b42:	20 d0       	rcall	.+64     	; 0xb84 <__ultoa_invert+0x84>
 b44:	09 f4       	brne	.+2      	; 0xb48 <__ultoa_invert+0x48>
 b46:	68 94       	set
 b48:	3f 91       	pop	r19
 b4a:	2a e0       	ldi	r18, 0x0A	; 10
 b4c:	26 9f       	mul	r18, r22
 b4e:	11 24       	eor	r1, r1
 b50:	30 19       	sub	r19, r0
 b52:	30 5d       	subi	r19, 0xD0	; 208
 b54:	31 93       	st	Z+, r19
 b56:	de f6       	brtc	.-74     	; 0xb0e <__ultoa_invert+0xe>
 b58:	cf 01       	movw	r24, r30
 b5a:	08 95       	ret
 b5c:	46 2f       	mov	r20, r22
 b5e:	47 70       	andi	r20, 0x07	; 7
 b60:	40 5d       	subi	r20, 0xD0	; 208
 b62:	41 93       	st	Z+, r20
 b64:	b3 e0       	ldi	r27, 0x03	; 3
 b66:	0f d0       	rcall	.+30     	; 0xb86 <__ultoa_invert+0x86>
 b68:	c9 f7       	brne	.-14     	; 0xb5c <__ultoa_invert+0x5c>
 b6a:	f6 cf       	rjmp	.-20     	; 0xb58 <__ultoa_invert+0x58>
 b6c:	46 2f       	mov	r20, r22
 b6e:	4f 70       	andi	r20, 0x0F	; 15
 b70:	40 5d       	subi	r20, 0xD0	; 208
 b72:	4a 33       	cpi	r20, 0x3A	; 58
 b74:	18 f0       	brcs	.+6      	; 0xb7c <__ultoa_invert+0x7c>
 b76:	49 5d       	subi	r20, 0xD9	; 217
 b78:	31 fd       	sbrc	r19, 1
 b7a:	40 52       	subi	r20, 0x20	; 32
 b7c:	41 93       	st	Z+, r20
 b7e:	02 d0       	rcall	.+4      	; 0xb84 <__ultoa_invert+0x84>
 b80:	a9 f7       	brne	.-22     	; 0xb6c <__ultoa_invert+0x6c>
 b82:	ea cf       	rjmp	.-44     	; 0xb58 <__ultoa_invert+0x58>
 b84:	b4 e0       	ldi	r27, 0x04	; 4
 b86:	a6 95       	lsr	r26
 b88:	97 95       	ror	r25
 b8a:	87 95       	ror	r24
 b8c:	77 95       	ror	r23
 b8e:	67 95       	ror	r22
 b90:	ba 95       	dec	r27
 b92:	c9 f7       	brne	.-14     	; 0xb86 <__ultoa_invert+0x86>
 b94:	00 97       	sbiw	r24, 0x00	; 0
 b96:	61 05       	cpc	r22, r1
 b98:	71 05       	cpc	r23, r1
 b9a:	08 95       	ret
 b9c:	9b 01       	movw	r18, r22
 b9e:	ac 01       	movw	r20, r24
 ba0:	0a 2e       	mov	r0, r26
 ba2:	06 94       	lsr	r0
 ba4:	57 95       	ror	r21
 ba6:	47 95       	ror	r20
 ba8:	37 95       	ror	r19
 baa:	27 95       	ror	r18
 bac:	ba 95       	dec	r27
 bae:	c9 f7       	brne	.-14     	; 0xba2 <__ultoa_invert+0xa2>
 bb0:	62 0f       	add	r22, r18
 bb2:	73 1f       	adc	r23, r19
 bb4:	84 1f       	adc	r24, r20
 bb6:	95 1f       	adc	r25, r21
 bb8:	a0 1d       	adc	r26, r0
 bba:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

000011c6 <__prologue_saves__>:
    11c6:	2f 92       	push	r2
    11c8:	3f 92       	push	r3
    11ca:	4f 92       	push	r4
    11cc:	5f 92       	push	r5
    11ce:	6f 92       	push	r6
    11d0:	7f 92       	push	r7
    11d2:	8f 92       	push	r8
    11d4:	9f 92       	push	r9
    11d6:	af 92       	push	r10
    11d8:	bf 92       	push	r11
    11da:	cf 92       	push	r12
    11dc:	df 92       	push	r13
    11de:	ef 92       	push	r14
    11e0:	ff 92       	push	r15
    11e2:	0f 93       	push	r16
    11e4:	1f 93       	push	r17
    11e6:	cf 93       	push	r28
    11e8:	df 93       	push	r29
    11ea:	cd b7       	in	r28, 0x3d	; 61
    11ec:	de b7       	in	r29, 0x3e	; 62
    11ee:	ca 1b       	sub	r28, r26
    11f0:	db 0b       	sbc	r29, r27
    11f2:	0f b6       	in	r0, 0x3f	; 63
    11f4:	f8 94       	cli
    11f6:	de bf       	out	0x3e, r29	; 62
    11f8:	0f be       	out	0x3f, r0	; 63
    11fa:	cd bf       	out	0x3d, r28	; 61
    11fc:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

00001234 <__epilogue_restores__>:
    1234:	2a 88       	ldd	r2, Y+18	; 0x12
    1236:	39 88       	ldd	r3, Y+17	; 0x11
    1238:	48 88       	ldd	r4, Y+16	; 0x10
    123a:	5f 84       	ldd	r5, Y+15	; 0x0f
    123c:	6e 84       	ldd	r6, Y+14	; 0x0e
    123e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1240:	8c 84       	ldd	r8, Y+12	; 0x0c
    1242:	9b 84       	ldd	r9, Y+11	; 0x0b
    1244:	aa 84       	ldd	r10, Y+10	; 0x0a
    1246:	b9 84       	ldd	r11, Y+9	; 0x09
    1248:	c8 84       	ldd	r12, Y+8	; 0x08
    124a:	df 80       	ldd	r13, Y+7	; 0x07
    124c:	ee 80       	ldd	r14, Y+6	; 0x06
    124e:	fd 80       	ldd	r15, Y+5	; 0x05
    1250:	0c 81       	ldd	r16, Y+4	; 0x04
    1252:	1b 81       	ldd	r17, Y+3	; 0x03
    1254:	aa 81       	ldd	r26, Y+2	; 0x02
    1256:	b9 81       	ldd	r27, Y+1	; 0x01
    1258:	ce 0f       	add	r28, r30
    125a:	d1 1d       	adc	r29, r1
    125c:	0f b6       	in	r0, 0x3f	; 63
    125e:	f8 94       	cli
    1260:	de bf       	out	0x3e, r29	; 62
    1262:	0f be       	out	0x3f, r0	; 63
    1264:	cd bf       	out	0x3d, r28	; 61
    1266:	ed 01       	movw	r28, r26
    1268:	08 95       	ret
